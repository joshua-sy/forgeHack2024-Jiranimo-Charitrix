"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));
var _reactSelect = _interopRequireWildcard(require("react-select"));
var _reactUid = require("react-uid");
var _reactPopper = require("react-popper");
var _reactNodeResolver = _interopRequireDefault(require("react-node-resolver"));
var _shallowEqual = require("shallow-equal");
var _Select = _interopRequireDefault(require("../Select"));
var _colors = require("@atlaskit/theme/colors");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _components = require("./components");
var _styles = _interopRequireDefault(require("../styles"));
var _bindEventListener = require("bind-event-listener");
var _excluded = ["footer", "label", "maxMenuWidth", "minMenuWidth", "placeholder", "target", "testId"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/** Are we rendering on the client or server? */
var canUseDOM = function canUseDOM() {
  return Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
};

// ==============================
// Types
// ==============================

// ==============================
// Class
// ==============================

var modifiers = [{
  name: 'offset',
  options: {
    offset: [0, 8]
  }
}, {
  name: 'preventOverflow',
  enabled: true,
  options: {
    padding: 5,
    boundary: 'clippingParents',
    altAxis: true,
    altBoundary: true
  }
}];
var defaultPopperProps = {
  modifiers: modifiers,
  placement: 'bottom-start'
};
var isEmpty = function isEmpty(obj) {
  return Object.keys(obj).length === 0;
};
var PopupSelect = exports.default = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(PopupSelect, _PureComponent);
  var _super = _createSuper(PopupSelect);
  function PopupSelect() {
    var _this$defaultOpenStat;
    var _this;
    (0, _classCallCheck2.default)(this, PopupSelect);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "menuRef", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "targetRef", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "unbindWindowClick", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "unbindWindowKeydown", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "defaultStyles", (0, _reactSelect.mergeStyles)((0, _styles.default)(_this.props.validationState || (_this.props.isInvalid ? 'error' : 'default'), _this.props.spacing === 'compact', 'default'), {
      groupHeading: function groupHeading(provided) {
        return _objectSpread(_objectSpread({}, provided), {}, {
          color: "var(--ds-text-subtlest, ".concat(_colors.N80, ")")
        });
      }
    }));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isOpenControlled", _this.props.isOpen !== undefined);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "defaultOpenState", _this.isOpenControlled ? _this.props.isOpen : _this.props.defaultIsOpen);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      focusLockEnabled: false,
      isOpen: (_this$defaultOpenStat = _this.defaultOpenState) !== null && _this$defaultOpenStat !== void 0 ? _this$defaultOpenStat : false,
      mergedComponents: _components.defaultComponents,
      mergedPopperProps: defaultPopperProps
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "popperWrapperId", "".concat((0, _reactUid.uid)({
      options: _this.props.options
    }), "-popup-select"));
    // Event Handlers
    // ==============================
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTargetKeyDown", function (event) {
      switch (event.key) {
        case 'ArrowDown':
          _this.open();
          break;
        default:
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyDown", function (event) {
      switch (event.key) {
        case 'Escape':
        case 'Esc':
          _this.close();
          break;
        default:
      }
      if (_this.props.onKeyDown) {
        /* @ts-ignore - updating type of event React.KeyboardEvent effects the unbindWindowsKeyDown listener. Check if this can be fixed once the component gets refactor to functional */
        _this.props.onKeyDown(event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function (_ref) {
      var target = _ref.target;
      var isOpen = _this.state.isOpen;
      // appease flow
      if (!(target instanceof Element)) {
        return;
      }

      // NOTE: Why not use the <Blanket /> component to close?
      // We don't want to interupt the user's flow. Taking this approach allows
      // user to click "through" to other elements and close the popout.
      if (isOpen && _this.menuRef && !_this.menuRef.contains(target)) {
        _this.close();
      }

      // open on target click -- we can't trust consumers to spread the onClick
      // property to the target
      if (!isOpen && _this.targetRef && _this.targetRef.contains(target)) {
        _this.open();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelectChange", function (value, actionMeta) {
      var _this$props = _this.props,
        closeMenuOnSelect = _this$props.closeMenuOnSelect,
        onChange = _this$props.onChange;
      if (closeMenuOnSelect && actionMeta.action !== 'clear') {
        _this.close();
      }
      if (onChange) {
        onChange(value, actionMeta);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFirstPopperUpdate", function () {
      // When the popup opens it's focused into. Since the popup is inside a portal, it's position is
      // initially set to 0,0 - this causes the window scroll position to jump to the top. To prevent
      // this we defer enabling the focus-lock until after Popper has positioned the popup the first time.
      _this.setState({
        focusLockEnabled: true
      });
    });
    // Internal Lifecycle
    // ==============================
    /**
     * Opens the popup
     *
     * @param options.controlOverride  - Force the popup to open when it's open state is being controlled
     */
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "open", function (options) {
      var onOpen = _this.props.onOpen;
      if (!(options !== null && options !== void 0 && options.controlOverride) && _this.isOpenControlled) {
        // Prevent popup opening if it's open state is already being controlled
        return;
      }
      if (onOpen) {
        onOpen();
      }
      _this.setState({
        isOpen: true
      });
      if (_this.selectRef) {
        var _this$selectRef$selec;
        (0, _platformFeatureFlags.getBooleanFF)('platform.design-system-team.use-default-select-in-popup-select_46rmj') ? (_this$selectRef$selec = _this.selectRef.select) === null || _this$selectRef$selec === void 0 ? void 0 : _this$selectRef$selec.openMenu('first') : _this.selectRef.openMenu('first');
      }
      if (typeof window === 'undefined') {
        return;
      }
      _this.unbindWindowKeydown = (0, _bindEventListener.bind)(window, {
        type: 'keydown',
        listener: _this.handleKeyDown,
        options: {
          capture: true
        }
      });
    });
    /**
     * Closes the popup
     *
     * @param options.controlOverride  - Force the popup to close when it's open state is being controlled
     */
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "close", function (options) {
      var _this$unbindWindowKey, _this2;
      var onClose = _this.props.onClose;
      if (!(options !== null && options !== void 0 && options.controlOverride) && _this.isOpenControlled) {
        // Prevent popup closing if it's open state is already being controlled
        return;
      }
      if (onClose) {
        onClose();
      }
      _this.setState({
        isOpen: false
      });
      _this.setState({
        focusLockEnabled: false
      });
      if (_this.targetRef != null) {
        _this.targetRef.focus();
      }
      if (typeof window === 'undefined') {
        return;
      }
      (_this$unbindWindowKey = (_this2 = _this).unbindWindowKeydown) === null || _this$unbindWindowKey === void 0 || _this$unbindWindowKey.call(_this2);
      _this.unbindWindowKeydown = null;
    });
    // Refs
    // ==============================
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "resolveTargetRef", function (popperRef) {
      return function (ref) {
        // avoid thrashing fn calls
        if (!_this.targetRef && popperRef && ref) {
          _this.targetRef = ref;
          if (typeof popperRef === 'function') {
            popperRef(ref);
          } else {
            popperRef.current = ref;
          }
        }
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "resolveMenuRef", function (popperRef) {
      return function (ref) {
        _this.menuRef = ref;
        if (typeof popperRef === 'function') {
          popperRef(ref);
        } else {
          popperRef.current = ref;
        }
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getSelectRef", function (ref) {
      _this.selectRef = ref;
    });
    // Utils
    // ==============================
    // account for groups when counting options
    // this may need to be recursive, right now it just counts one level
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getItemCount", function () {
      var options = _this.props.options;
      var count = 0;
      options.forEach(function (groupOrOption) {
        if (groupOrOption.options) {
          groupOrOption.options.forEach(function () {
            return count++;
          });
        } else {
          count++;
        }
      });
      return count;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getMaxHeight", function () {
      var _this$selectRef$selec2;
      var maxMenuHeight = _this.props.maxMenuHeight;
      if (!_this.selectRef) {
        return maxMenuHeight;
      }

      // subtract the control height to maintain consistency
      var showSearchControl = _this.showSearchControl();
      var controlRef = (0, _platformFeatureFlags.getBooleanFF)('platform.design-system-team.use-default-select-in-popup-select_46rmj') ? (_this$selectRef$selec2 = _this.selectRef.select) === null || _this$selectRef$selec2 === void 0 ? void 0 : _this$selectRef$selec2.controlRef : _this.selectRef.controlRef;
      var offsetHeight = showSearchControl && controlRef ? controlRef.offsetHeight : 0;
      var maxHeight = maxMenuHeight - offsetHeight;
      return maxHeight;
    });
    // if the threshold is exceeded, AND isSearchable is true, then display the search control
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "showSearchControl", function () {
      var _this$props2 = _this.props,
        searchThreshold = _this$props2.searchThreshold,
        isSearchable = _this$props2.isSearchable;
      return isSearchable && _this.getItemCount() > searchThreshold;
    });
    // Renderers
    // ==============================
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSelect", function () {
      var _this$props3 = _this.props,
        footer = _this$props3.footer,
        label = _this$props3.label,
        maxMenuWidth = _this$props3.maxMenuWidth,
        minMenuWidth = _this$props3.minMenuWidth,
        placeholder = _this$props3.placeholder,
        target = _this$props3.target,
        testId = _this$props3.testId,
        props = (0, _objectWithoutProperties2.default)(_this$props3, _excluded);
      var _this$state = _this.state,
        focusLockEnabled = _this$state.focusLockEnabled,
        isOpen = _this$state.isOpen,
        mergedComponents = _this$state.mergedComponents,
        mergedPopperProps = _this$state.mergedPopperProps;
      var showSearchControl = _this.showSearchControl();
      var portalDestination = canUseDOM() ? document.body : null;
      if (!portalDestination || !isOpen) {
        return null;
      }
      var selectComponents = _objectSpread(_objectSpread({}, mergedComponents), {}, {
        Control: showSearchControl ? mergedComponents.Control : _components.DummyControl
      });
      var getLabel = function getLabel() {
        if (label) {
          return label;
        } else if (typeof placeholder === 'string') {
          return placeholder;
        }
      };
      var InternalSelect = (0, _platformFeatureFlags.getBooleanFF)('platform.design-system-team.use-default-select-in-popup-select_46rmj') ? _Select.default : _reactSelect.default;
      var popper = /*#__PURE__*/_react.default.createElement(_reactPopper.Popper, (0, _extends2.default)({}, mergedPopperProps, {
        onFirstUpdate: function onFirstUpdate(state) {
          var _mergedPopperProps$on;
          _this.handleFirstPopperUpdate();
          (_mergedPopperProps$on = mergedPopperProps.onFirstUpdate) === null || _mergedPopperProps$on === void 0 || _mergedPopperProps$on.call(mergedPopperProps, state);
        }
      }), function (_ref2) {
        var placement = _ref2.placement,
          ref = _ref2.ref,
          style = _ref2.style;
        return /*#__PURE__*/_react.default.createElement(_reactNodeResolver.default, {
          innerRef: _this.resolveMenuRef(ref)
        }, /*#__PURE__*/_react.default.createElement(_components.MenuDialog
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        , {
          style: style,
          "data-placement": placement,
          minWidth: minMenuWidth,
          maxWidth: maxMenuWidth,
          id: _this.popperWrapperId,
          testId: testId
        }, /*#__PURE__*/_react.default.createElement(_reactFocusLock.default, {
          disabled: !focusLockEnabled,
          returnFocus: true
        }, /*#__PURE__*/_react.default.createElement(InternalSelect, (0, _extends2.default)({
          "aria-label": getLabel(),
          backspaceRemovesValue: false,
          controlShouldRenderValue: false,
          isClearable: false,
          tabSelectsValue: false,
          menuIsOpen: true,
          placeholder: placeholder,
          ref: _this.getSelectRef
        }, props, {
          onMenuClose: function onMenuClose() {
            var _props$onMenuClose;
            (0, _platformFeatureFlags.getBooleanFF)('platform.design-system-team.popup-select-close_8h15h') && _this.close();
            (_props$onMenuClose = props.onMenuClose) === null || _props$onMenuClose === void 0 || _props$onMenuClose.call(props);
          },
          isSearchable: showSearchControl
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          ,
          styles: (0, _reactSelect.mergeStyles)(_this.defaultStyles, props.styles || {}),
          maxMenuHeight: _this.getMaxHeight(),
          components: selectComponents,
          onChange: _this.handleSelectChange
        })), footer)));
      });
      return mergedPopperProps.strategy === 'fixed' ? popper : /*#__PURE__*/(0, _reactDom.createPortal)(popper, portalDestination);
    });
    return _this;
  }
  (0, _createClass2.default)(PopupSelect, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (typeof window === 'undefined') {
        return;
      }
      this.unbindWindowClick = (0, _bindEventListener.bind)(window, {
        type: 'click',
        listener: this.handleClick,
        options: {
          capture: true
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$unbindWindowCli, _this$unbindWindowKey2;
      if (typeof window === 'undefined') {
        return;
      }
      (_this$unbindWindowCli = this.unbindWindowClick) === null || _this$unbindWindowCli === void 0 || _this$unbindWindowCli.call(this);
      this.unbindWindowClick = null;
      (_this$unbindWindowKey2 = this.unbindWindowKeydown) === null || _this$unbindWindowKey2 === void 0 || _this$unbindWindowKey2.call(this);
      this.unbindWindowKeydown = null;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var isOpen = this.props.isOpen;
      if (prevProps.isOpen !== isOpen) {
        if (isOpen === true) {
          this.open({
            controlOverride: true
          });
        } else if (isOpen === false) {
          this.close({
            controlOverride: true
          });
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var target = this.props.target;
      var isOpen = this.state.isOpen;
      return /*#__PURE__*/_react.default.createElement(_reactPopper.Manager, null, /*#__PURE__*/_react.default.createElement(_reactPopper.Reference, null, function (_ref3) {
        var ref = _ref3.ref;
        return target && target({
          isOpen: isOpen,
          onKeyDown: _this3.handleTargetKeyDown,
          ref: _this3.resolveTargetRef(ref),
          'aria-haspopup': 'true',
          'aria-expanded': isOpen,
          'aria-controls': isOpen ? _this3.popperWrapperId : undefined
        });
      }), this.renderSelect());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var newState = {};

      // Merge consumer and default popper props
      var mergedPopperProps = _objectSpread(_objectSpread({}, defaultPopperProps), props.popperProps);
      if (!(0, _shallowEqual.shallowEqualObjects)(mergedPopperProps, state.mergedPopperProps)) {
        newState.mergedPopperProps = mergedPopperProps;
      }

      // Merge consumer and default components
      var mergedComponents = _objectSpread(_objectSpread({}, _components.defaultComponents), props.components);
      if (!(0, _shallowEqual.shallowEqualObjects)(mergedComponents, state.mergedComponents)) {
        newState.mergedComponents = mergedComponents;
      }
      if (!isEmpty(newState)) {
        return newState;
      }
      return null;
    }
  }]);
  return PopupSelect;
}(_react.PureComponent);
(0, _defineProperty2.default)(PopupSelect, "defaultProps", {
  closeMenuOnSelect: true,
  components: {},
  maxMenuHeight: 300,
  maxMenuWidth: 440,
  minMenuWidth: 220,
  popperProps: {},
  isSearchable: true,
  searchThreshold: 5,
  styles: {},
  options: []
});