"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadingIndicator = exports.DropdownIndicator = exports.ClearIndicator = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("@emotion/react");
var _reactSelect = require("react-select");
var _primitives = require("@atlaskit/primitives");
var _spinner = _interopRequireDefault(require("@atlaskit/spinner"));
var _selectClear = _interopRequireDefault(require("@atlaskit/icon/glyph/select-clear"));
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/glyph/chevron-down"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * @jsxRuntime classic
 */ /** @jsx jsx */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var iconContainerStyles = (0, _primitives.xcss)({
  all: 'unset',
  outline: 'revert',
  display: 'flex',
  alignItems: 'center'
});
var ClearIndicator = exports.ClearIndicator = function ClearIndicator(props) {
  return (0, _react.jsx)(_reactSelect.components.ClearIndicator, _objectSpread(_objectSpread({}, props), {}, {
    innerProps: _objectSpread(_objectSpread({}, props.innerProps), {}, {
      'aria-hidden': 'false'
    })
  }), (0, _react.jsx)(_primitives.Pressable, {
    xcss: iconContainerStyles,
    tabIndex: -1
  }, (0, _react.jsx)(_selectClear.default, {
    size: "small",
    label: "clear"
  })));
};
var DropdownIndicator = exports.DropdownIndicator = function DropdownIndicator(props) {
  return (0, _react.jsx)(_reactSelect.components.DropdownIndicator, props, (0, _react.jsx)(_chevronDown.default, {
    label: "open"
  }));
};
var LoadingIndicator = exports.LoadingIndicator = function LoadingIndicator(props) {
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  var loadingStyles = (0, _react.css)(props.getStyles('loadingIndicator', props));
  return (
    // This *must* be constructed this way because this is being consumed by
    // `react-select` and we don't control what it wants.
    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
    (0, _react.jsx)("div", (0, _extends2.default)({
      css: loadingStyles
    }, props.innerProps), (0, _react.jsx)(_spinner.default, {
      size: "small"
    }))
  );
};