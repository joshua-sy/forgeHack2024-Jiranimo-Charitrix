import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import Select, { components } from '@atlaskit/select';
export var defaultLocales = [{
  value: 'en-AU',
  label: 'English (Australia)'
}, {
  value: 'en-GB',
  label: 'English (United Kingdom)'
}, {
  value: 'en-US',
  label: 'English (United States)'
}, {
  value: 'ko-KR',
  label: '한국어 (대한민국)'
}, {
  value: 'nl-NL',
  label: 'Nederlands (Nederland)'
}, {
  value: 'ru-RU',
  label: 'русский (Россия)'
}, {
  value: 'hu-HU',
  label: 'magyar (Magyarország)'
}, {
  value: 'pt-BR',
  label: 'português (Brasil)'
}, {
  value: 'de-DE',
  label: 'Deutsch (Deutschland)'
}, {
  value: 'is-IS',
  label: 'íslenska (Ísland)'
}, {
  value: 'cs-CZ',
  label: 'čeština (Česká republika)'
}, {
  value: 'da-DK',
  label: 'Dansk (Danmark)'
}, {
  value: 'et-EE',
  label: 'Eesti (Eesti)'
}, {
  value: 'pl-PL',
  label: 'polski (Polska)'
}, {
  value: 'sk-SK',
  label: 'Slovenčina (Slovenská republika)'
}, {
  value: 'it-IT',
  label: 'italiano (Italia)'
}, {
  value: 'pt-PT',
  label: 'português (Portugal)'
}, {
  value: 'vi-VN',
  label: 'Tiếng Việt (Việt Nam)'
}, {
  value: 'zh-CN',
  label: '中文 (中国)'
}, {
  value: 'es-ES',
  label: 'español (España)'
}, {
  value: 'sv-SE',
  label: 'svenska (Sverige)'
}, {
  value: 'ja-JP',
  label: '日本語 (日本)'
}, {
  value: 'fi-FI',
  label: 'suomi (Suomi)'
}, {
  value: 'fr-FR',
  label: 'français (France)'
}, {
  value: 'ro-RO',
  label: 'română (România)'
}, {
  value: 'no-NO',
  label: 'norsk (Norge)'
}];
var SingleValue = function SingleValue(_ref) {
  var children = _ref.children,
    props = _objectWithoutProperties(_ref, _excluded);
  var selectedLang = props.data.value;
  return /*#__PURE__*/React.createElement(components.SingleValue, _extends({}, props, {
    innerProps: {
      lang: selectedLang
    }
  }), children);
};
var LocaleSelect = function LocaleSelect(_ref2) {
  var id = _ref2.id,
    _ref2$locales = _ref2.locales,
    locales = _ref2$locales === void 0 ? defaultLocales : _ref2$locales,
    locale = _ref2.locale,
    _ref2$defaultLocale = _ref2.defaultLocale,
    defaultLocale = _ref2$defaultLocale === void 0 ? defaultLocales[0] : _ref2$defaultLocale,
    _ref2$onLocaleChange = _ref2.onLocaleChange,
    onLocaleChange = _ref2$onLocaleChange === void 0 ? function () {} : _ref2$onLocaleChange;
  return /*#__PURE__*/React.createElement(Select, {
    inputId: id,
    options: locales,
    value: locale,
    defaultValue: defaultLocale,
    onChange: function onChange(locale) {
      return onLocaleChange(locale);
    },
    components: {
      SingleValue: SingleValue
    },
    styles: {
      container: function container(css) {
        return _objectSpread(_objectSpread({}, css), {}, {
          width: 300,
          margin: '0.5em 0'
        });
      },
      dropdownIndicator: function dropdownIndicator(css) {
        return _objectSpread(_objectSpread({}, css), {}, {
          paddingLeft: 0
        });
      },
      menu: function menu(css) {
        return _objectSpread(_objectSpread({}, css), {}, {
          width: 300
        });
      }
    }
  });
};
export default LocaleSelect;