import React, { createContext, useContext, useEffect, useMemo, useRef } from 'react';
import __noop from '@atlaskit/ds-lib/noop';

/**
 *
 *  @internal
 * LevelContext which maintains the current level of nested layers
 * Default is 0
 */
export const LevelContext = /*#__PURE__*/createContext(0);

/**
 *
 *  @internal
 * TopLevelContext which maintains the top level ref and setTopLevel method of layers
 * Default ref value is null
 *
 */
export const TopLevelContext = /*#__PURE__*/createContext({
  topLevelRef: {
    current: null
  },
  setTopLevel: __noop
});

/**
 *
 *  @internal
 * Context Provider Component which provider the current level of nested layers
 * It handles level management when it mounts and unmounts
 *
 */
const LevelProvider = ({
  children,
  currentLevel
}) => {
  const {
    setTopLevel
  } = useContext(TopLevelContext);
  setTopLevel(currentLevel);
  useEffect(() => {
    // avoid immediate cleanup using setTimeout when component unmount
    // this will make sure non-top layer components can get the correct top level value
    // when multiple layers trigger onClose in sequence.
    // From React 17, the useEffect cleanup functions are delayed till the commit phase is completed. In other words, the useEffect cleanup functions run asynchronously - for example, if the component is unmounting, the cleanup runs after the screen has been updated.
    // TODO revisit after we migrate to react 18. https://product-fabric.atlassian.net/browse/DSP-13139
    return () => {
      setTimeout(() => {
        setTopLevel(currentLevel - 1);
      }, 0);
    };
  }, [setTopLevel, currentLevel]);
  return /*#__PURE__*/React.createElement(LevelContext.Provider, {
    value: currentLevel
  }, children);
};

/**
 *
 *  @internal
 * Context Provider Component which provides the top level of all nested layers
 * It provides initial top level ref value as 0 and set top level method
 *
 */
const LayeringProvider = ({
  children
}) => {
  const topLevelRef = useRef(0);
  const value = useMemo(() => ({
    topLevelRef,
    setTopLevel: level => {
      topLevelRef.current = level;
    }
  }), [topLevelRef]);
  return /*#__PURE__*/React.createElement(TopLevelContext.Provider, {
    value: value
  }, children);
};

/**
 * __UNSAFE_LAYERING__
 *
 * @experimental Still under development. Do not use.
 *
 * @important the component is toggled by isDisabled props, default is true
 *
 * Layering component is a wrapper to let children to consume layer contexts and hooks.
 *
 */
export const UNSAFE_LAYERING = ({
  children,
  isDisabled = true
}) => {
  const currentLevel = useContext(LevelContext);
  if (isDisabled) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }
  const isNested = currentLevel > 0;
  const content = /*#__PURE__*/React.createElement(LevelProvider, {
    currentLevel: currentLevel + 1
  }, children);
  return isNested ? content : /*#__PURE__*/React.createElement(LayeringProvider, null, content);
};