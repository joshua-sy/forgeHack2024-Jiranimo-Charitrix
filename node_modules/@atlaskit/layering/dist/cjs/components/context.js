"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UNSAFE_LAYERING = exports.TopLevelContext = exports.LevelContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 *
 *  @internal
 * LevelContext which maintains the current level of nested layers
 * Default is 0
 */
var LevelContext = exports.LevelContext = /*#__PURE__*/(0, _react.createContext)(0);

/**
 *
 *  @internal
 * TopLevelContext which maintains the top level ref and setTopLevel method of layers
 * Default ref value is null
 *
 */
var TopLevelContext = exports.TopLevelContext = /*#__PURE__*/(0, _react.createContext)({
  topLevelRef: {
    current: null
  },
  setTopLevel: _noop.default
});

/**
 *
 *  @internal
 * Context Provider Component which provider the current level of nested layers
 * It handles level management when it mounts and unmounts
 *
 */
var LevelProvider = function LevelProvider(_ref) {
  var children = _ref.children,
    currentLevel = _ref.currentLevel;
  var _useContext = (0, _react.useContext)(TopLevelContext),
    setTopLevel = _useContext.setTopLevel;
  setTopLevel(currentLevel);
  (0, _react.useEffect)(function () {
    // avoid immediate cleanup using setTimeout when component unmount
    // this will make sure non-top layer components can get the correct top level value
    // when multiple layers trigger onClose in sequence.
    // From React 17, the useEffect cleanup functions are delayed till the commit phase is completed. In other words, the useEffect cleanup functions run asynchronously - for example, if the component is unmounting, the cleanup runs after the screen has been updated.
    // TODO revisit after we migrate to react 18. https://product-fabric.atlassian.net/browse/DSP-13139
    return function () {
      setTimeout(function () {
        setTopLevel(currentLevel - 1);
      }, 0);
    };
  }, [setTopLevel, currentLevel]);
  return /*#__PURE__*/_react.default.createElement(LevelContext.Provider, {
    value: currentLevel
  }, children);
};

/**
 *
 *  @internal
 * Context Provider Component which provides the top level of all nested layers
 * It provides initial top level ref value as 0 and set top level method
 *
 */
var LayeringProvider = function LayeringProvider(_ref2) {
  var children = _ref2.children;
  var topLevelRef = (0, _react.useRef)(0);
  var value = (0, _react.useMemo)(function () {
    return {
      topLevelRef: topLevelRef,
      setTopLevel: function setTopLevel(level) {
        topLevelRef.current = level;
      }
    };
  }, [topLevelRef]);
  return /*#__PURE__*/_react.default.createElement(TopLevelContext.Provider, {
    value: value
  }, children);
};

/**
 * __UNSAFE_LAYERING__
 *
 * @experimental Still under development. Do not use.
 *
 * @important the component is toggled by isDisabled props, default is true
 *
 * Layering component is a wrapper to let children to consume layer contexts and hooks.
 *
 */
var UNSAFE_LAYERING = exports.UNSAFE_LAYERING = function UNSAFE_LAYERING(_ref3) {
  var children = _ref3.children,
    _ref3$isDisabled = _ref3.isDisabled,
    isDisabled = _ref3$isDisabled === void 0 ? true : _ref3$isDisabled;
  var currentLevel = (0, _react.useContext)(LevelContext);
  if (isDisabled) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
  }
  var isNested = currentLevel > 0;
  var content = /*#__PURE__*/_react.default.createElement(LevelProvider, {
    currentLevel: currentLevel + 1
  }, children);
  return isNested ? content : /*#__PURE__*/_react.default.createElement(LayeringProvider, null, content);
};