/**
 * @jsxRuntime classic
 */
/** @jsx jsx */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import SuccessIcon from '@atlaskit/icon/glyph/editor/success';
import ErrorIcon from '@atlaskit/icon/glyph/error';
import { N200 } from '@atlaskit/theme/colors';
import { FieldId } from './field-id-context';

/**
 * API for the internal `<Message />` component. This is not public API.
 */

/**
 * Public API of the various message components.
 */

const messageStyles = css({
  display: 'flex',
  justifyContent: 'baseline',
  gap: "var(--ds-space-050, 4px)",
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  marginBlockStart: "var(--ds-space-050, 4px)"
});
const messageAppearanceStyles = {
  default: css({
    color: `var(--ds-text-subtlest, ${N200})`
  }),
  error: css({
    color: "var(--ds-text-danger, #AE2A19)"
  }),
  valid: css({
    color: "var(--ds-text-success, #216E4E)"
  })
};
const iconWrapperStyles = css({
  display: 'flex'
});
const IconWrapper = ({
  children
}) => {
  return jsx("span", {
    css: iconWrapperStyles
  }, children);
};
const messageIcons = {
  error: jsx(ErrorIcon, {
    size: "small",
    label: "error"
  }),
  valid: jsx(SuccessIcon, {
    size: "small",
    label: "success"
  })
};
const Message = ({
  children,
  appearance = 'default',
  fieldId,
  testId
}) => {
  const icon = messageIcons[appearance];

  /**
   * The wrapping span is necessary to preserve spaces between children.
   * Otherwise the flex layout of the message will remove any whitespace
   * between children.
   *
   * If the child is just a string, this is not required and we can use one
   * less DOM element.
   */
  const content = typeof children === 'string' ? children : jsx("span", null, children);
  return jsx("div", {
    css: [messageStyles, messageAppearanceStyles[appearance]],
    "data-testid": testId,
    id: fieldId,
    "aria-live": "polite"
  }, icon && jsx(IconWrapper, null, icon), content);
};

/**
 * __Helper message__
 *
 * A helper message tells the user what kind of input the field takes. For example, a helper message could be
 * 'Password should be more than 4 characters'
 *
 */
export const HelperMessage = ({
  children,
  testId
}) => jsx(FieldId.Consumer, null, fieldId => jsx(Message, {
  fieldId: fieldId ? `${fieldId}-helper` : undefined,
  testId: testId
}, children));

/**
 * __Error message__
 *
 * An error message is used to tell a user that the field input is invalid. For example, an error message could be
 * 'Invalid username, needs to be more than 4 characters'.
 *
 */
export const ErrorMessage = ({
  children,
  testId
}) => jsx(FieldId.Consumer, null, fieldId => jsx(Message, {
  appearance: "error",
  fieldId: fieldId ? `${fieldId}-error` : undefined,
  testId: testId
}, children));

/**
 * __Valid message__
 *
 * A valid message is used to tell a user that the field input is valid. For example,
 * a helper message could be 'Nice one, this username is available'.
 *
 */
export const ValidMessage = ({
  children,
  testId
}) => jsx(FieldId.Consumer, null, fieldId => jsx(Message, {
  appearance: "valid",
  fieldId: fieldId ? `${fieldId}-valid` : undefined,
  testId: testId
}, children));