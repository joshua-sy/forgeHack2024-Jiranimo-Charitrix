"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidMessage = exports.HelperMessage = exports.ErrorMessage = void 0;
var _react = require("@emotion/react");
var _success = _interopRequireDefault(require("@atlaskit/icon/glyph/editor/success"));
var _error = _interopRequireDefault(require("@atlaskit/icon/glyph/error"));
var _colors = require("@atlaskit/theme/colors");
var _fieldIdContext = require("./field-id-context");
/**
 * @jsxRuntime classic
 */
/** @jsx jsx */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

/**
 * API for the internal `<Message />` component. This is not public API.
 */

/**
 * Public API of the various message components.
 */

var messageStyles = (0, _react.css)({
  display: 'flex',
  justifyContent: 'baseline',
  gap: "var(--ds-space-050, 4px)",
  font: "var(--ds-font-body-UNSAFE_small, normal 400 12px/16px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  marginBlockStart: "var(--ds-space-050, 4px)"
});
var messageAppearanceStyles = {
  default: (0, _react.css)({
    color: "var(--ds-text-subtlest, ".concat(_colors.N200, ")")
  }),
  error: (0, _react.css)({
    color: "var(--ds-text-danger, #AE2A19)"
  }),
  valid: (0, _react.css)({
    color: "var(--ds-text-success, #216E4E)"
  })
};
var iconWrapperStyles = (0, _react.css)({
  display: 'flex'
});
var IconWrapper = function IconWrapper(_ref) {
  var children = _ref.children;
  return (0, _react.jsx)("span", {
    css: iconWrapperStyles
  }, children);
};
var messageIcons = {
  error: (0, _react.jsx)(_error.default, {
    size: "small",
    label: "error"
  }),
  valid: (0, _react.jsx)(_success.default, {
    size: "small",
    label: "success"
  })
};
var Message = function Message(_ref2) {
  var children = _ref2.children,
    _ref2$appearance = _ref2.appearance,
    appearance = _ref2$appearance === void 0 ? 'default' : _ref2$appearance,
    fieldId = _ref2.fieldId,
    testId = _ref2.testId;
  var icon = messageIcons[appearance];

  /**
   * The wrapping span is necessary to preserve spaces between children.
   * Otherwise the flex layout of the message will remove any whitespace
   * between children.
   *
   * If the child is just a string, this is not required and we can use one
   * less DOM element.
   */
  var content = typeof children === 'string' ? children : (0, _react.jsx)("span", null, children);
  return (0, _react.jsx)("div", {
    css: [messageStyles, messageAppearanceStyles[appearance]],
    "data-testid": testId,
    id: fieldId,
    "aria-live": "polite"
  }, icon && (0, _react.jsx)(IconWrapper, null, icon), content);
};

/**
 * __Helper message__
 *
 * A helper message tells the user what kind of input the field takes. For example, a helper message could be
 * 'Password should be more than 4 characters'
 *
 */
var HelperMessage = exports.HelperMessage = function HelperMessage(_ref3) {
  var children = _ref3.children,
    testId = _ref3.testId;
  return (0, _react.jsx)(_fieldIdContext.FieldId.Consumer, null, function (fieldId) {
    return (0, _react.jsx)(Message, {
      fieldId: fieldId ? "".concat(fieldId, "-helper") : undefined,
      testId: testId
    }, children);
  });
};

/**
 * __Error message__
 *
 * An error message is used to tell a user that the field input is invalid. For example, an error message could be
 * 'Invalid username, needs to be more than 4 characters'.
 *
 */
var ErrorMessage = exports.ErrorMessage = function ErrorMessage(_ref4) {
  var children = _ref4.children,
    testId = _ref4.testId;
  return (0, _react.jsx)(_fieldIdContext.FieldId.Consumer, null, function (fieldId) {
    return (0, _react.jsx)(Message, {
      appearance: "error",
      fieldId: fieldId ? "".concat(fieldId, "-error") : undefined,
      testId: testId
    }, children);
  });
};

/**
 * __Valid message__
 *
 * A valid message is used to tell a user that the field input is valid. For example,
 * a helper message could be 'Nice one, this username is available'.
 *
 */
var ValidMessage = exports.ValidMessage = function ValidMessage(_ref5) {
  var children = _ref5.children,
    testId = _ref5.testId;
  return (0, _react.jsx)(_fieldIdContext.FieldId.Consumer, null, function (fieldId) {
    return (0, _react.jsx)(Message, {
      appearance: "valid",
      fieldId: fieldId ? "".concat(fieldId, "-valid") : undefined,
      testId: testId
    }, children);
  });
};