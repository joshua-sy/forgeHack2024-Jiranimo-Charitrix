import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "defaultIsChecked", "value"],
  _excluded2 = ["value"],
  _excluded3 = ["fieldProps"],
  _excluded4 = ["value"],
  _excluded5 = ["fieldProps"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useCallback } from 'react';
import Field from './field';
/**
 * __Checkbox field__
 *
 * A checkbox field is a form field that lets users select an item. Users can check or uncheck the checkbox.
 *
 * - [Examples] https://atlaskit.atlassian.com/packages/design-system/form/docs/fields#checkboxfield-reference
 * - [Code] https://atlaskit.atlassian.com/packages/design-system/form/docs/fields#checkboxfield-reference
 * - [Usage] https://atlaskit.atlassian.com/packages/design-system/form/docs/fields#checkboxfield-reference
 */
var CheckboxField = function CheckboxField(props) {
  var children = props.children,
    _props$defaultIsCheck = props.defaultIsChecked,
    defaultIsChecked = _props$defaultIsCheck === void 0 ? false : _props$defaultIsCheck,
    value = props.value,
    rest = _objectWithoutProperties(props, _excluded);

  // Maintains a memoised list of the default values
  var defaultValue = useCallback(function () {
    var currentValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return defaultIsChecked && value !== undefined ? [].concat(_toConsumableArray(currentValue), [value]) : currentValue;
  }, [value, defaultIsChecked]);
  return value !== undefined ? /*#__PURE__*/React.createElement(Field, _extends({}, rest, {
    defaultValue: defaultValue,
    transform: function transform(event, currentValue) {
      return event.currentTarget.checked && currentValue ? [].concat(_toConsumableArray(currentValue), [value]) : currentValue.filter(function (v) {
        return v !== value;
      });
    }
  }), function (_ref) {
    var _ref$fieldProps = _ref.fieldProps,
      fieldValue = _ref$fieldProps.value,
      otherFieldProps = _objectWithoutProperties(_ref$fieldProps, _excluded2),
      others = _objectWithoutProperties(_ref, _excluded3);
    return children(_objectSpread({
      fieldProps: _objectSpread(_objectSpread({}, otherFieldProps), {}, {
        isChecked: !!fieldValue.find(function (v) {
          return v === value;
        }),
        value: value
      })
    }, others));
  }) : /*#__PURE__*/React.createElement(Field, _extends({}, rest, {
    defaultValue: defaultIsChecked,
    transform: function transform(event) {
      return event.currentTarget.checked;
    }
  }), function (_ref2) {
    var _ref2$fieldProps = _ref2.fieldProps,
      fieldValue = _ref2$fieldProps.value,
      otherFieldProps = _objectWithoutProperties(_ref2$fieldProps, _excluded4),
      others = _objectWithoutProperties(_ref2, _excluded5);
    return children(_objectSpread({
      fieldProps: _objectSpread(_objectSpread({}, otherFieldProps), {}, {
        isChecked: fieldValue,
        value: value
      })
    }, others));
  });
};
CheckboxField.defaultProps = {
  defaultIsChecked: false
};
export default CheckboxField;