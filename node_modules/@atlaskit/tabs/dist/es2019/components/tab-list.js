/**
 * @jsxRuntime classic
 */
/** @jsx jsx */
import { Children, createRef, useCallback } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { useTabList } from '../hooks';
import { TabContext } from '../internal/context';
import { getTabListStyles } from '../internal/styles';
const baseStyles = css({
  display: 'flex',
  padding: "var(--ds-space-0, 0px)",
  position: 'relative'
});

// eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
const tabListStyles = getTabListStyles();

/**
 * __TabList__
 *
 * A TabList groups `Tab` components together.
 *
 * - [Examples](https://atlassian.design/components/tabs/examples)
 * - [Code](https://atlassian.design/components/tabs/code)
 * - [Usage](https://atlassian.design/components/tabs/usage)
 */
const TabList = ({
  children
}) => {
  const {
    tabsId,
    selected,
    onChange
  } = useTabList();
  const ref = /*#__PURE__*/createRef();

  // Don't include any conditional children
  const childrenArray = Children.toArray(children).filter(Boolean);
  const length = childrenArray.length;
  const selectTabByIndex = useCallback(index => {
    var _ref$current;
    const newSelectedNode = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelector(`[id='${tabsId}-${index}']`);
    if (newSelectedNode) {
      newSelectedNode.focus();
    }
    onChange(index);
  }, [tabsId, ref, onChange]);
  const onKeyDown = useCallback(e => {
    if (!['ArrowRight', 'ArrowLeft', 'Home', 'End'].includes(e.key)) {
      return;
    }

    // preventing horizontal or vertical scroll
    e.preventDefault();
    const lastTabIndex = length - 1;
    if (['Home', 'End'].includes(e.key)) {
      const newSelected = e.key === 'Home' ? 0 : lastTabIndex;
      selectTabByIndex(newSelected);
      return;
    }

    // We use aria-posinset so we don't rely on the selected variable
    // If we used the selected variable this would regenerate each time
    // and create an unstable reference
    const selectedIndex = parseInt(e.currentTarget.getAttribute('aria-posinset') || '0') - 1;
    const modifier = e.key === 'ArrowRight' ? 1 : -1;
    let newSelected = selectedIndex + modifier;
    if (newSelected < 0 || newSelected >= length) {
      // Cycling focus to move from last to first and from first to last
      newSelected = newSelected < 0 ? lastTabIndex : 0;
    }
    selectTabByIndex(newSelected);
  }, [length, selectTabByIndex]);

  // Memoized so the function isn't recreated each time
  const getTabWithContext = useCallback(({
    tab,
    isSelected,
    index
  }) => jsx(TabContext.Provider, {
    value: {
      onClick: () => onChange(index),
      onKeyDown,
      'aria-setsize': length,
      role: 'tab',
      id: `${tabsId}-${index}`,
      'aria-posinset': index + 1,
      'aria-selected': isSelected,
      'aria-controls': `${tabsId}-${index}-tab`,
      tabIndex: isSelected ? 0 : -1
    },
    key: index
  }, tab), [length, onKeyDown, onChange, tabsId]);
  return (
    // Only styles that affect the TabList itself have been applied via primitives.
    // The other styles applied through the CSS prop are there for styling children
    // through inheritance. This is important for custom cases that use the useTab(),
    // which applies accessibility atributes that we use as a styling hook.
    jsx("div", {
      role: "tablist",
      ref: ref
      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage
      ,
      css: [baseStyles, tabListStyles]
    }, childrenArray.map((child, index) => getTabWithContext({
      tab: child,
      index,
      isSelected: index === selected
    })))
  );
};
export default TabList;