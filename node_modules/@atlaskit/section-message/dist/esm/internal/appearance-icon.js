import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import CheckCircleIcon from '@atlaskit/icon/glyph/check-circle';
import ErrorIcon from '@atlaskit/icon/glyph/error';
import InfoIcon from '@atlaskit/icon/glyph/info';
import QuestionCircleIcon from '@atlaskit/icon/glyph/question-circle';
import WarningIcon from '@atlaskit/icon/glyph/warning';
import { B50, B500, G50, G500, P50, P500, R50, R500, Y50, Y500 } from '@atlaskit/theme/colors';
export var appearanceIconSchema = {
  information: {
    backgroundColor: "var(--ds-background-information, ".concat(B50, ")"),
    Icon: InfoIcon,
    primaryIconColor: "var(--ds-icon-information, ".concat(B500, ")")
  },
  warning: {
    backgroundColor: "var(--ds-background-warning, ".concat(Y50, ")"),
    Icon: WarningIcon,
    primaryIconColor: "var(--ds-icon-warning, ".concat(Y500, ")")
  },
  error: {
    backgroundColor: "var(--ds-background-danger, ".concat(R50, ")"),
    Icon: ErrorIcon,
    primaryIconColor: "var(--ds-icon-danger, ".concat(R500, ")")
  },
  success: {
    backgroundColor: "var(--ds-background-success, ".concat(G50, ")"),
    Icon: CheckCircleIcon,
    primaryIconColor: "var(--ds-icon-success, ".concat(G500, ")")
  },
  discovery: {
    backgroundColor: "var(--ds-background-discovery, ".concat(P50, ")"),
    Icon: QuestionCircleIcon,
    primaryIconColor: "var(--ds-icon-discovery, ".concat(P500, ")")
  }
};
export function getAppearanceIconStyles(appearance, icon) {
  var appearanceIconStyles = appearanceIconSchema[appearance] || appearanceIconSchema.information;
  var AppearanceIcon = function AppearanceIcon(_ref) {
    var size = _ref.size,
      primaryColor = _ref.primaryColor,
      secondaryColor = _ref.secondaryColor;
    return /*#__PURE__*/React.createElement(appearanceIconStyles.Icon, {
      size: size,
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      label: appearance
    });
  };
  var Icon = icon || AppearanceIcon;
  return _objectSpread(_objectSpread({}, appearanceIconStyles), {}, {
    Icon: Icon
  });
}