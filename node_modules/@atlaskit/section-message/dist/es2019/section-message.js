import React, { forwardRef } from 'react';
import Heading from '@atlaskit/heading';
import { Box, Inline, Stack, Text, xcss } from '@atlaskit/primitives';
import { getAppearanceIconStyles } from './internal/appearance-icon';
const sectionMessageStyles = xcss({
  wordBreak: 'break-word',
  borderRadius: 'border.radius'
});
const bleedStyles = xcss({
  display: 'flex',
  marginBlock: 'space.negative.025'
});

/**
 * __Section message__
 *
 * A section message is used to alert users to a particular section of the screen.
 *
 * - [Examples](https://atlassian.design/components/section-message/examples)
 * - [Code](https://atlassian.design/components/section-message/code)
 * - [Usage](https://atlassian.design/components/section-message/usage)
 */
const SectionMessage = /*#__PURE__*/forwardRef(function SectionMessage({
  children,
  appearance = 'information',
  actions,
  title,
  icon,
  testId
}, ref) {
  const {
    primaryIconColor: primaryColor,
    backgroundColor: secondaryColor,
    Icon
  } = getAppearanceIconStyles(appearance, icon);
  const actionElements = actions && actions.type === React.Fragment ? actions.props.children : actions;
  const actionsArray = React.Children.toArray(actionElements);
  return /*#__PURE__*/React.createElement(Box, {
    as: "section",
    backgroundColor: appearanceMap[appearance],
    padding: "space.200",
    testId: testId,
    ref: ref,
    xcss: sectionMessageStyles
  }, /*#__PURE__*/React.createElement(Inline, {
    space: "space.200",
    alignBlock: "stretch"
  }, /*#__PURE__*/React.createElement(Box, {
    xcss: bleedStyles
  }, /*#__PURE__*/React.createElement(Icon, {
    size: "medium",
    primaryColor: primaryColor,
    secondaryColor: secondaryColor
  })), /*#__PURE__*/React.createElement(Stack, {
    space: "space.100",
    testId: testId && `${testId}--content`
  }, !!title && /*#__PURE__*/React.createElement(Heading, {
    as: "h2",
    level: "h500"
  }, title), /*#__PURE__*/React.createElement(Text, null, children), actionsArray.length > 0 && /*#__PURE__*/React.createElement(Inline, {
    shouldWrap: true,
    testId: testId && `${testId}--actions`,
    separator: "\xB7",
    space: "space.100",
    rowSpace: "space.0"
  }, actionsArray))));
});
const appearanceMap = {
  information: 'color.background.information',
  warning: 'color.background.warning',
  error: 'color.background.danger',
  success: 'color.background.success',
  discovery: 'color.background.discovery'
};
SectionMessage.displayName = 'SectionMessage';
export default SectionMessage;