import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
var _excluded = ["cells"],
  _excluded2 = ["colSpan", "content", "isSortable", "key", "shouldTruncate", "testId", "width"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import { validateSortKey } from '../internal/helpers';
import { Head } from '../styled/table-head';
import RankableHeadCell from './rankable/table-head-cell';
import HeadCell from './table-head-cell';
var TableHead = /*#__PURE__*/function (_React$Component) {
  _inherits(TableHead, _React$Component);
  var _super = _createSuper(TableHead);
  function TableHead() {
    _classCallCheck(this, TableHead);
    return _super.apply(this, arguments);
  }
  _createClass(TableHead, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      validateSortKey(this.props.sortKey, this.props.head);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.sortKey !== nextProps.sortKey || this.props.head !== nextProps.head) {
        validateSortKey(nextProps.sortKey, nextProps.head);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        head = _this$props.head,
        sortKey = _this$props.sortKey,
        sortOrder = _this$props.sortOrder,
        isFixedSize = _this$props.isFixedSize,
        onSort = _this$props.onSort,
        isRanking = _this$props.isRanking,
        isRankable = _this$props.isRankable,
        testId = _this$props.testId;
      if (!head) {
        return null;
      }
      var HeadCellComponent = isRankable ? RankableHeadCell : HeadCell;

      // TODO: Remove `rest` props and use only what is explicitly in the API.
      // Some tests use this to pass in onClick and other stuff within the `head`
      // variable here, but considering it's not in the API, it should probably
      // be removed.
      var cells = head.cells,
        rest = _objectWithoutProperties(head, _excluded);
      return /*#__PURE__*/React.createElement(Head, _extends({}, rest, {
        isRanking: isRanking,
        testId: testId && "".concat(testId, "--head")
      }), /*#__PURE__*/React.createElement("tr", null, cells.map(function (cell, index) {
        var colSpan = cell.colSpan,
          content = cell.content,
          isSortable = cell.isSortable,
          key = cell.key,
          shouldTruncate = cell.shouldTruncate,
          cellTestId = cell.testId,
          width = cell.width,
          restCellProps = _objectWithoutProperties(cell, _excluded2);
        return /*#__PURE__*/React.createElement(HeadCellComponent, _extends({
          colSpan: colSpan,
          content: content,
          isFixedSize: isFixedSize,
          isSortable: !!isSortable,
          isRanking: isRanking,
          key: key || index,
          onClick: isSortable ? onSort(cell) : undefined,
          testId: cellTestId || testId,
          shouldTruncate: shouldTruncate,
          sortOrder: key === sortKey ? sortOrder : undefined,
          width: width
        }, restCellProps));
      })));
    }
  }]);
  return TableHead;
}(React.Component); // eslint-disable-next-line @repo/internal/react/require-jsdoc
export default TableHead;