import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
var _excluded = ["isRanking", "refHeight", "refWidth"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import withDimensions from '../../hoc/with-dimensions';
import { inlineStylesIfRanking } from '../../internal/helpers';
import HeadCell from '../table-head-cell';
var RankableTableHeadCell = /*#__PURE__*/function (_React$Component) {
  _inherits(RankableTableHeadCell, _React$Component);
  var _super = _createSuper(RankableTableHeadCell);
  function RankableTableHeadCell() {
    _classCallCheck(this, RankableTableHeadCell);
    return _super.apply(this, arguments);
  }
  _createClass(RankableTableHeadCell, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        isRanking = _this$props.isRanking,
        refHeight = _this$props.refHeight,
        refWidth = _this$props.refWidth,
        restProps = _objectWithoutProperties(_this$props, _excluded);
      var inlineStyles = inlineStylesIfRanking(isRanking, refWidth);
      return /*#__PURE__*/React.createElement(HeadCell, _extends({
        inlineStyles: inlineStyles
      }, restProps));
    }
  }]);
  return RankableTableHeadCell;
}(React.Component);
export default withDimensions(RankableTableHeadCell);