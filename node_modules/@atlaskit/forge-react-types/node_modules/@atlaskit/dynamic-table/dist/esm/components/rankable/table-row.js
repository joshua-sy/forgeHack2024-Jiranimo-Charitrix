import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["cells", "testId", "key", "isHighlighted"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';

// Allowing existing usage of non Pragmatic drag and drop solution
// eslint-disable-next-line @atlaskit/design-system/no-unsupported-drag-and-drop-libraries
import { Draggable } from 'react-beautiful-dnd';
import withDimensions from '../../hoc/with-dimensions';
import { inlineStylesIfRanking } from '../../internal/helpers';
import { RankableTableBodyRow } from '../../styled/rankable/table-row';
import TableCell from './table-cell';
export var RankableTableRow = /*#__PURE__*/function (_React$Component) {
  _inherits(RankableTableRow, _React$Component);
  var _super = _createSuper(RankableTableRow);
  function RankableTableRow() {
    var _this;
    _classCallCheck(this, RankableTableRow);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "innerRef", function (innerRefFn) {
      return function (ref) {
        innerRefFn(ref);
        if (typeof _this.props.innerRef === 'function') {
          _this.props.innerRef(ref);
        }
      };
    });
    return _this;
  }
  _createClass(RankableTableRow, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props,
        row = _this$props.row,
        head = _this$props.head,
        isFixedSize = _this$props.isFixedSize,
        isRanking = _this$props.isRanking,
        refWidth = _this$props.refWidth,
        rowIndex = _this$props.rowIndex,
        isRankingDisabled = _this$props.isRankingDisabled,
        isHighlighted = _this$props.isHighlighted,
        testId = _this$props.testId;
      var cells = row.cells,
        rowTestId = row.testId,
        key = row.key,
        isRowHighlighted = row.isHighlighted,
        restRowProps = _objectWithoutProperties(row, _excluded);
      var inlineStyles = inlineStylesIfRanking(isRanking, refWidth);
      if (typeof key !== 'string' && !isRankingDisabled) {
        throw new Error('dynamic-table: ranking is not possible because table row does not have a key. Add the key to the row or disable ranking.');
      }
      return /*#__PURE__*/React.createElement(Draggable, {
        draggableId: key || rowIndex.toString(),
        index: rowIndex,
        isDragDisabled: isRankingDisabled
      }, function (provided, snapshot) {
        var _provided$dragHandleP;
        return /*#__PURE__*/React.createElement(RankableTableBodyRow, _extends({}, restRowProps, provided.dragHandleProps, provided.draggableProps, {
          // It is necessary to prevent the passing of aria-labelledby
          "aria-labelledby": undefined,
          "aria-describedby": (_provided$dragHandleP = provided.dragHandleProps) === null || _provided$dragHandleP === void 0 ? void 0 : _provided$dragHandleP['aria-describedby'],
          ref: _this2.innerRef(provided.innerRef)
          // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
          ,
          style: _objectSpread(_objectSpread({}, provided.draggableProps.style), inlineStyles),
          isHighlighted: isHighlighted || isRowHighlighted,
          isRanking: isRanking,
          isRankingItem: snapshot.isDragging,
          testId: rowTestId || testId && "".concat(testId, "--rankable--table--body--row")
        }), cells.map(function (cell, cellIndex) {
          var headCell = (head || {
            cells: []
          }).cells[cellIndex];
          return /*#__PURE__*/React.createElement(TableCell, {
            head: headCell,
            cell: cell,
            isRanking: isRanking,
            key: cell.key || cellIndex,
            isFixedSize: isFixedSize,
            testId: testId
          });
        }));
      });
    }
  }]);
  return RankableTableRow;
}(React.Component);
export default withDimensions(RankableTableRow);