import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import Spinner from '@atlaskit/spinner';
import { LARGE, LOADING_CONTENTS_OPACITY } from '../internal/constants';
import { Container, ContentsContainer, SpinnerContainer } from '../styled/loading-container';
var LoadingContainer = /*#__PURE__*/function (_React$Component) {
  _inherits(LoadingContainer, _React$Component);
  var _super = _createSuper(LoadingContainer);
  function LoadingContainer() {
    _classCallCheck(this, LoadingContainer);
    return _super.apply(this, arguments);
  }
  _createClass(LoadingContainer, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        children = _this$props.children,
        isLoading = _this$props.isLoading,
        spinnerSize = _this$props.spinnerSize,
        contentsOpacity = _this$props.contentsOpacity,
        testId = _this$props.testId,
        loadingLabel = _this$props.loadingLabel;
      return /*#__PURE__*/React.createElement(Container, {
        testId: testId
      }, !isLoading ? children : /*#__PURE__*/React.createElement(ContentsContainer, {
        contentsOpacity: contentsOpacity,
        testId: testId
      }, children), isLoading && /*#__PURE__*/React.createElement(SpinnerContainer, {
        testId: testId
      }, /*#__PURE__*/React.createElement(Spinner, {
        size: spinnerSize,
        testId: testId && "".concat(testId, "--loadingSpinner"),
        label: loadingLabel
      })));
    }
  }]);
  return LoadingContainer;
}(React.Component);
_defineProperty(LoadingContainer, "defaultProps", {
  isLoading: true,
  spinnerSize: LARGE,
  contentsOpacity: LOADING_CONTENTS_OPACITY,
  loadingLabel: 'Loading table'
});
export { LoadingContainer as default };