import React from 'react';
import { type UIAnalyticsEvent } from '@atlaskit/analytics-next';
import noop from '@atlaskit/ds-lib/noop';
import { type StatelessProps as Props, type RankEnd, type RankStart, type RowCellType } from '../types';
export interface State {
    isRanking: boolean;
}
declare class DynamicTable extends React.Component<Props, State> {
    tableBody: React.RefObject<HTMLTableSectionElement>;
    state: {
        isRanking: boolean;
    };
    static defaultProps: {
        isLoading: boolean;
        isFixedSize: boolean;
        rowsPerPage: number;
        onSetPage: typeof noop;
        onSort: typeof noop;
        page: number;
        isRankable: boolean;
        isRankingDisabled: boolean;
        onRankStart: typeof noop;
        onRankEnd: typeof noop;
        paginationi18n: {
            prev: string;
            next: string;
            label: string;
            pageLabel: string;
        };
    };
    UNSAFE_componentWillMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    onSortHandler: (item: RowCellType) => () => void;
    onSetPageHandler: (page: number, event?: UIAnalyticsEvent) => void;
    onRankStartHandler: (params: RankStart) => void;
    onRankEndHandler: (params: RankEnd) => void;
    getSpinnerSize: () => import("../types").LoadingSpinnerSizeType;
    renderEmptyBody: () => JSX.Element | undefined;
    render(): JSX.Element;
}
export { DynamicTable as DynamicTableWithoutAnalytics };
declare const _default: React.ForwardRefExoticComponent<Pick<Pick<Omit<Props, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, "head" | "caption" | "rows" | "emptyView" | "loadingSpinnerSize" | "loadingLabel" | "totalRows" | "onPageRowsUpdate" | "sortKey" | "sortOrder" | "highlightedRowIndex" | "testId" | "label"> & Partial<Pick<Omit<Props, keyof import("@atlaskit/analytics-next").WithAnalyticsEventsProps>, "isLoading" | "isFixedSize" | "rowsPerPage" | "onSetPage" | "onSort" | "page" | "isRankable" | "isRankingDisabled" | "onRankStart" | "onRankEnd" | "paginationi18n">> & Partial<Pick<{
    isLoading: boolean;
    isFixedSize: boolean;
    rowsPerPage: number;
    onSetPage: typeof noop;
    onSort: typeof noop;
    page: number;
    isRankable: boolean;
    isRankingDisabled: boolean;
    onRankStart: typeof noop;
    onRankEnd: typeof noop;
    paginationi18n: {
        prev: string;
        next: string;
        label: string;
        pageLabel: string;
    };
}, never>> & React.RefAttributes<any> & import("@atlaskit/analytics-next").WithContextProps, "head" | "caption" | "rows" | "emptyView" | "loadingSpinnerSize" | "isLoading" | "loadingLabel" | "isFixedSize" | "rowsPerPage" | "totalRows" | "onSetPage" | "onSort" | "onPageRowsUpdate" | "page" | "sortKey" | "sortOrder" | "isRankable" | "isRankingDisabled" | "onRankStart" | "onRankEnd" | "paginationi18n" | "highlightedRowIndex" | "testId" | "label" | "key" | "analyticsContext"> & React.RefAttributes<any>>;
export default _default;
