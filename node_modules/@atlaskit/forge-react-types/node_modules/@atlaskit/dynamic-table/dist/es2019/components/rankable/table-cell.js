import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import withDimensions from '../../hoc/with-dimensions';
import { inlineStylesIfRanking } from '../../internal/helpers';
import { RankableTableBodyCell } from '../../styled/rankable/table-cell';
export class RankableTableCell extends React.Component {
  render() {
    const {
      cell,
      head,
      isFixedSize,
      isRanking,
      refWidth,
      innerRef,
      testId
    } = this.props;
    const {
      content,
      testId: cellTestId,
      ...restCellProps
    } = cell;
    const {
      shouldTruncate,
      width
    } = head || {};
    const inlineStyles = inlineStylesIfRanking(isRanking, refWidth);
    return /*#__PURE__*/React.createElement(RankableTableBodyCell, _extends({}, restCellProps, {
      isFixedSize: isFixedSize,
      shouldTruncate: shouldTruncate,
      width: width,
      isRanking: isRanking
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      ,
      style: inlineStyles,
      onKeyDown: e => e.stopPropagation(),
      innerRef: innerRef,
      "data-testid": cellTestId || testId && `${testId}--rankable--table--body--cell`
    }), content);
  }
}
export default withDimensions(RankableTableCell);