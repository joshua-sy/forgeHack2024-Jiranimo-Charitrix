import _extends from "@babel/runtime/helpers/extends";
import React, { useRef, useEffect, useMemo, forwardRef, useImperativeHandle } from 'react';
import { mergeStyles } from 'react-select';
import { Input } from './components/input-aria-describedby';
import { NoOptionsMessage } from './components/no-options';
import { ClearIndicator, DropdownIndicator, LoadingIndicator, MultiValueRemove, IndicatorSeparator } from './components';
import baseStyles from './styles';
import { onFocus, isOptionsGrouped } from './utils/grouped-options-announcement';
export default function createSelect(WrappedComponent) {
  const AtlaskitSelect = /*#__PURE__*/forwardRef(function AtlaskitSelect(props, forwardedRef) {
    const {
      appearance,
      ariaLiveMessages,
      components: componentsProp,
      isInvalid,
      // TODO: set to true when cleaning up validationState prop so it has a default value
      onClickPreventDefault = true,
      spacing = 'default',
      styles = {},
      tabSelectsValue = false,
      validationState = 'default',
      ...restProps
    } = props;
    const internalSelectRef = useRef(null);
    const components = useMemo(() => ({
      ClearIndicator,
      DropdownIndicator,
      LoadingIndicator,
      MultiValueRemove,
      IndicatorSeparator,
      Input,
      NoOptionsMessage,
      ...componentsProp
    }), [componentsProp]);
    const descriptionId = props['aria-describedby'];
    const isSearchable = props.isSearchable;
    useEffect(() => {
      if (!isSearchable && descriptionId) {
        var _internalSelectRef$cu;
        // when isSearchable is false, react-select will create its own dummy input instead of using ours,
        // so we need to manually add the additional aria-describedby using ref.
        const input = (_internalSelectRef$cu = internalSelectRef.current) === null || _internalSelectRef$cu === void 0 ? void 0 : _internalSelectRef$cu.inputRef;
        const ariaDescribedby = input === null || input === void 0 ? void 0 : input.getAttribute('aria-describedby');
        if (!(ariaDescribedby !== null && ariaDescribedby !== void 0 && ariaDescribedby.includes(descriptionId))) {
          input === null || input === void 0 ? void 0 : input.setAttribute('aria-describedby', `${ariaDescribedby} ${descriptionId}`);
        }
      }
    }, [descriptionId, isSearchable]);
    const isCompact = spacing === 'compact';

    /**
     * The following `useImperativeHandle` hook exists for the sake of backwards compatibility.
     * This component used to be a class component which set the value of the `ref` prop to object with the properties and value as below.
     * This has lead to slightly odd usage of refs with this component, e.g. `myRef.current.select.select.controlRef` instead of just `myRef.current.select.controlRef`
     * In the next major release, this should removed and the ref should be passed directly to the wrapped component (given users have updated usage)
     * More info https://stash.atlassian.com/projects/ATLASSIAN/repos/atlassian-frontend-monorepo/pull-requests/88021/overview
     */
    useImperativeHandle(forwardedRef, () => ({
      select: internalSelectRef.current,
      focus: () => {
        var _internalSelectRef$cu2;
        return (_internalSelectRef$cu2 = internalSelectRef.current) === null || _internalSelectRef$cu2 === void 0 ? void 0 : _internalSelectRef$cu2.focus();
      },
      blur: () => {
        var _internalSelectRef$cu3;
        return (_internalSelectRef$cu3 = internalSelectRef.current) === null || _internalSelectRef$cu3 === void 0 ? void 0 : _internalSelectRef$cu3.blur();
      }
    }), []);
    return /*#__PURE__*/React.createElement(WrappedComponent, _extends({
      ref: internalSelectRef,
      "aria-live": "assertive",
      ariaLiveMessages: isOptionsGrouped(props.options) ? {
        onFocus,
        ...ariaLiveMessages
      } : {
        ...ariaLiveMessages
      },
      tabSelectsValue: tabSelectsValue,
      onClickPreventDefault: onClickPreventDefault
    }, restProps, {
      components: components
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      ,
      styles: mergeStyles(
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      baseStyles(
      // This will cover both props for invalid state while giving priority to isInvalid. When cleaning up validationState, we can just keep the inner condition.
      typeof isInvalid !== 'undefined' ? isInvalid ? 'error' : 'default' : validationState, isCompact, appearance || 'default'), styles)
    }));
  });
  AtlaskitSelect.displayName = 'AtlaskitSelect';
  return AtlaskitSelect;
}