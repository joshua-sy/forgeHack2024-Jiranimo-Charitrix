"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 *
 * Extract component prop types from UIKit 2 components - BoxProps
 *
 * @codegen <<SignedSource::ff889836988991365ebf829e9793e10d>>
 * @codegenCommand yarn workspace @atlaskit/forge-react-types codegen
 * @codegenDependency ../../../../forge-ui/src/components/UIKit2-codegen/box/__generated__/index.partial.tsx <<SignedSource::c2e0a3f5394718d7a9864acb3ffccd00>>
 */
/* eslint-disable @atlaskit/design-system/ensure-design-token-usage/preview */

/**
 *
 * @param supportedXCSSProps - the list of css props to be supported for the intended component.
 *    If not provided, all the props will be supported. The props could be either standard css props
 *    or design token based props. If the prop is a design token based prop, the value of the prop
 *    will be validated against the design tokens map to ensure the value is a valid design token string.
 * @returns a function that takes a style object and returns a style object with only the supported props
 *    as specified in the supportedXCSSProps list. The props that are not supported will be removed from the
 *    returned style object and a warning will be logged in the console.
 */

var xcssValidator = makeXCSSValidator({
  // color related props
  color: true,
  boxShadow: true,
  opacity: true,
  backgroundColor: true,
  borderColor: true,
  borderBlockColor: true,
  borderBlockEndColor: true,
  borderBlockStartColor: true,
  borderBottomColor: true,
  borderInlineColor: true,
  borderInlineEndColor: true,
  borderInlineStartColor: true,
  borderLeftColor: true,
  borderRightColor: true,
  borderTopColor: true,
  // layout and space related props
  width: {
    allowCSS: true
  },
  height: {
    allowCSS: true
  },
  minWidth: {
    allowCSS: true
  },
  maxWidth: {
    allowCSS: true
  },
  minHeight: {
    allowCSS: true
  },
  maxHeight: {
    allowCSS: true
  },
  margin: true,
  marginBlock: true,
  marginBlockEnd: true,
  marginBlockStart: true,
  marginBottom: true,
  marginInline: true,
  marginInlineEnd: true,
  marginInlineStart: true,
  marginLeft: true,
  marginRight: true,
  marginTop: true,
  padding: true,
  paddingBlock: true,
  paddingBlockEnd: true,
  paddingBlockStart: true,
  paddingBottom: true,
  paddingInline: true,
  paddingInlineEnd: true,
  paddingInlineStart: true,
  paddingLeft: true,
  paddingRight: true,
  paddingTop: true,
  // other box related props
  borderRadius: {
    supportedValues: ['border.radius']
  },
  borderBottomLeftRadius: {
    supportedValues: ['border.radius']
  },
  borderBottomRightRadius: {
    supportedValues: ['border.radius']
  },
  borderTopLeftRadius: {
    supportedValues: ['border.radius']
  },
  borderTopRightRadius: {
    supportedValues: ['border.radius']
  },
  borderEndEndRadius: {
    supportedValues: ['border.radius']
  },
  borderEndStartRadius: {
    supportedValues: ['border.radius']
  },
  borderStartEndRadius: {
    supportedValues: ['border.radius']
  },
  borderStartStartRadius: {
    supportedValues: ['border.radius']
  },
  borderWidth: {
    supportedValues: ['border.width']
  },
  borderBlockWidth: {
    supportedValues: ['border.width']
  },
  borderBlockEndWidth: {
    supportedValues: ['border.width']
  },
  borderBlockStartWidth: {
    supportedValues: ['border.width']
  },
  borderBottomWidth: {
    supportedValues: ['border.width']
  },
  borderInlineWidth: {
    supportedValues: ['border.width']
  },
  borderInlineEndWidth: {
    supportedValues: ['border.width']
  },
  borderInlineStartWidth: {
    supportedValues: ['border.width']
  },
  borderLeftWidth: {
    supportedValues: ['border.width']
  },
  borderRightWidth: {
    supportedValues: ['border.width']
  },
  borderTopWidth: {
    supportedValues: ['border.width']
  },
  // other props not in tokens based props
  borderTopStyle: {
    supportedValues: ['dotted', 'dashed', 'solid', 'none', 'hidden']
  },
  borderBottomStyle: {
    supportedValues: ['dotted', 'dashed', 'solid', 'none', 'hidden']
  },
  borderRightStyle: {
    supportedValues: ['dotted', 'dashed', 'solid', 'none', 'hidden']
  },
  borderLeftStyle: {
    supportedValues: ['dotted', 'dashed', 'solid', 'none', 'hidden']
  },
  borderStyle: {
    supportedValues: ['dotted', 'dashed', 'solid', 'none', 'hidden']
  },
  position: {
    supportedValues: ['relative', 'static']
  }
});