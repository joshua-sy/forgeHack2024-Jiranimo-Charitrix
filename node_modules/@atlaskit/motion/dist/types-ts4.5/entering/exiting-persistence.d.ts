import React, { type ReactNode } from 'react';
/**
 * Internally we will be playing with an element that will always have a key defined.
 */
export type ElementWithKey = JSX.Element & {
    key: string;
};
export interface ExitingPersistenceProps {
    /**
     * Children can be any valid react node.
     * Either a single element,
     * multiple elements,
     * or multiple elements in an array.
     */
    children?: ReactNode;
    /**
     * When elements are exiting will exit all elements first and then mount the new ones.
     * Defaults to `false`.
     */
    exitThenEnter?: boolean;
    /**
     * When initially mounting if set to `true` all child motions will animate in.
     */
    appear?: boolean;
}
/**
 * Internal data passed to child motions.
 */
export interface ExitingChildContext {
    /**
     * Will perform an exit animation instead of an enter animation.
     */
    isExiting: boolean;
    /**
     * Will be called when the animation has completed.
     */
    onFinish?: () => void;
    /**
     * Used to tell the child motions to animate in when initially mounting.
     */
    appear: boolean;
}
export declare const emptyContext: ExitingChildContext;
/**
 * __Exiting context__
 *
 * An exiting context.
 */
export declare const ExitingContext: React.Context<ExitingChildContext>;
/**
 * This method will wrap any React element with a context provider. We're using context (instead of
 * cloneElement) so we can communicate between multiple elements without the need of prop drilling
 * (results in a better API for consumers).
 */
export declare const wrapChildWithContextProvider: (child: JSX.Element, value?: ExitingChildContext) => JSX.Element;
/**
 * This function will convert all children types to an array while also filtering out non-valid React elements.
 */
export declare const childrenToArray: (children?: ReactNode) => ElementWithKey[];
export declare const spliceNewElementsIntoPrevious: (current: ElementWithKey[], previous: ElementWithKey[]) => ElementWithKey[];
export declare const childrenToObj: (children: ElementWithKey[]) => {
    [key: string]: ElementWithKey;
};
/**
 * __ExitingPersistence__
 *
 * Useful for enabling elements to persist and animate away when they are removed from the DOM.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/motion/docs/entering-motions)
 */
declare const ExitingPersistence: React.MemoExoticComponent<({ appear, children, exitThenEnter }: ExitingPersistenceProps) => any>;
export declare const useExitingPersistence: () => ExitingChildContext;
export default ExitingPersistence;
