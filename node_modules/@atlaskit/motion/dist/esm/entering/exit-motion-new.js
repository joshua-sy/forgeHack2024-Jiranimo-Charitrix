import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { memo, useEffect, useState } from 'react';
import { isReducedMotion } from '../utils/accessibility';
import { childrenToArray, spliceNewElementsIntoPrevious, wrapChildWithContextProvider } from './exiting-persistence';
var getMissingKeys = function getMissingKeys(current, previous) {
  var currentMapKeys = new Set(current.map(function (child) {
    return child.key;
  }));
  var missing = new Set();
  for (var i = 0; i < previous.length; i++) {
    var element = previous[i];
    var key = element.key;
    if (!currentMapKeys.has(key)) {
      missing.add(key);
    }
  }
  return missing;
};

/**
 * __WithStrictModeSupport__
 *
 * Useful for enabling elements to persist and animate away when they are removed from the DOM.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/motion/docs/entering-motions)
 */
var WithStrictModeSupport = /*#__PURE__*/memo(function (_ref) {
  var _ref$appear = _ref.appear,
    appear = _ref$appear === void 0 ? false : _ref$appear,
    children = _ref.children,
    exitThenEnter = _ref.exitThenEnter;
  var _useState = useState([null, children]),
    _useState2 = _slicedToArray(_useState, 2),
    stateChildren = _useState2[0],
    setChildren = _useState2[1];
  var _useState3 = useState([]),
    _useState4 = _slicedToArray(_useState3, 2),
    exitingChildren = _useState4[0],
    setExitingChildren = _useState4[1];
  var _useState5 = useState(function () {
      return {
        appear: appear,
        isExiting: false
      };
    }),
    _useState6 = _slicedToArray(_useState5, 2),
    defaultContext = _useState6[0],
    setDefaultContext = _useState6[1];
  useEffect(function () {
    if (!defaultContext.appear) {
      setDefaultContext({
        appear: true,
        isExiting: false
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  if (isReducedMotion()) {
    return children;
  }

  /**
   * NOTE: This is a workaround for the test case written in Jira where the stateChildren is a boolean value because
   * useState is mocked to return a boolean value.
   */
  if (typeof stateChildren === 'boolean') {
    return children;
  }
  var _stateChildren = _slicedToArray(stateChildren, 2),
    previousChildren = _stateChildren[0],
    currentChildren = _stateChildren[1];
  var previous = childrenToArray(previousChildren);
  var current = childrenToArray(currentChildren);
  if (currentChildren !== children) {
    setChildren([currentChildren, children]);
  }
  var missingKeys = getMissingKeys(current, previous);
  var isSomeChildRemoved = !!missingKeys.size;
  var visibleChildren = current;
  if (isSomeChildRemoved) {
    visibleChildren = spliceNewElementsIntoPrevious(current, previous);
  }
  if (exitThenEnter) {
    if (exitingChildren.length) {
      visibleChildren = exitingChildren;
    } else {
      var nextExitingChildren = visibleChildren.filter(function (child) {
        return missingKeys.has(child.key);
      });
      if (nextExitingChildren.length) {
        setExitingChildren(nextExitingChildren);
      }
    }
  }
  if (missingKeys.size) {
    visibleChildren = visibleChildren.map(function (child) {
      var isExiting = missingKeys.has(child.key);
      return wrapChildWithContextProvider(child, {
        appear: true,
        isExiting: isExiting,
        onFinish: isExiting ? function () {
          missingKeys.delete(child.key);
          if (missingKeys.size === 0) {
            setChildren([null, children]);
            setExitingChildren([]);
          }
        } : undefined
      });
    });
  } else {
    visibleChildren = visibleChildren.map(function (child) {
      return wrapChildWithContextProvider(child, defaultContext);
    });
  }
  return visibleChildren;
});
export default WithStrictModeSupport;