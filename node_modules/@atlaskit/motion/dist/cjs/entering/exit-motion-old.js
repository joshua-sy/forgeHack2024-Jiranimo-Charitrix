"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _accessibility = require("../utils/accessibility");
var _useForceRender = require("../utils/use-force-render");
var _exitingPersistence = require("./exiting-persistence");
var isAnyPreviousKeysMissingFromCurrent = function isAnyPreviousKeysMissingFromCurrent(currentMap, previous) {
  for (var i = 0; i < previous.length; i++) {
    var element = previous[i];
    var _key = element.key;
    if (!currentMap[_key]) {
      return true;
    }
  }
  return false;
};

/**
 * This handles the case when a render updates during an exit motion.
 * If any child is mounted again we removed them from the exiting children object and return true.
 */
var hasAnyExitingChildMountedAgain = function hasAnyExitingChildMountedAgain(exitingChildren, children) {
  var exitingChildMountedAgain = false;
  children.forEach(function (child) {
    if (exitingChildren.current[child.key]) {
      exitingChildMountedAgain = true;
      delete exitingChildren.current[child.key];
    }
  });
  return exitingChildMountedAgain;
};

/**
 * __ExitingPersistence__
 *
 * Useful for enabling elements to persist and animate away when they are removed from the DOM.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/motion/docs/entering-motions)
 */
var WithoutStrictModeSupport = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var _ref$appear = _ref.appear,
    appearFromProp = _ref$appear === void 0 ? false : _ref$appear,
    childs = _ref.children,
    exitThenEnter = _ref.exitThenEnter;
  var children = (0, _exitingPersistence.childrenToArray)(childs);
  var childrenObj = (0, _exitingPersistence.childrenToObj)(children);
  var previousChildren = (0, _react.useRef)([]);
  var persistedChildren = (0, _react.useRef)([]);
  var forceRender = (0, _useForceRender.useForceRender)();
  var exitingChildren = (0, _react.useRef)({});
  var appear = (0, _react.useRef)(appearFromProp);
  var defaultContextValue = (0, _react.useMemo)(function () {
    return {
      appear: appear.current,
      isExiting: false
    };
  },
  // React rules of hooks says this isn't needed because mutating appear won't cause a re-render.
  // While technically true - it will trigger this to make a new object on the _next_ render which is what we want.
  // Remove this or use appear instead of appear.current and you will notice a test breaks.
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [appear.current]);
  if ((0, _accessibility.isReducedMotion)()) {
    return children;
  }
  if (!appear.current) {
    // We always want child motions to appear after the initial mount.
    appear.current = true;
  }

  // This entire block can't be an effect because we need it to run synchronously during a render
  // else when elements are being removed they will be remounted instead of being updated.
  if (previousChildren.current.length && isAnyPreviousKeysMissingFromCurrent(childrenObj, previousChildren.current)) {
    if (persistedChildren.current.length === 0 || hasAnyExitingChildMountedAgain(exitingChildren, children)) {
      persistedChildren.current = previousChildren.current;
    }

    // We have persisted children now set from previous children.
    // Let's update previous children so we have it available next render.
    previousChildren.current = children;
    return (exitThenEnter ? persistedChildren.current : (0, _exitingPersistence.spliceNewElementsIntoPrevious)(children, persistedChildren.current)).map(function (child) {
      // eslint-disable-next-line @repo/internal/react/no-children-properties-access
      var currentChild = childrenObj[child.key];
      if (!currentChild) {
        // We've found an exiting child - mark it!
        exitingChildren.current[child.key] = true;
        return (0, _exitingPersistence.wrapChildWithContextProvider)(child, {
          isExiting: true,
          appear: true,
          onFinish: function onFinish() {
            delete exitingChildren.current[child.key];

            // We will only remove the exiting elements when any subsequent exiting elements have also finished.
            // Think of removing many items from a todo list - when removing a few over a few clicks we don't
            // want the list jumping around when they exit.
            if (Object.keys(exitingChildren.current).length === 0) {
              // Set previous children to nothing.
              // This let's us skip the next render check as it's assumed children and previous will be the same.
              previousChildren.current = [];
              persistedChildren.current = [];

              // Re-render after the element(s) have animated away which will end up rendering the latest children.
              forceRender();
            }
          }
        });
      }

      // This element isn't exiting.
      // Wrap context and let's continue on our way.
      return (0, _exitingPersistence.wrapChildWithContextProvider)(currentChild, defaultContextValue);
    });
  } else {
    previousChildren.current = children;
  }
  return children.map(function (child) {
    return (0, _exitingPersistence.wrapChildWithContextProvider)(child, defaultContextValue);
  });
});
var _default = exports.default = WithoutStrictModeSupport;