"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapChildWithContextProvider = exports.useExitingPersistence = exports.spliceNewElementsIntoPrevious = exports.emptyContext = exports.default = exports.childrenToObj = exports.childrenToArray = exports.ExitingContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _exitMotionNew = _interopRequireDefault(require("./exit-motion-new"));
var _exitMotionOld = _interopRequireDefault(require("./exit-motion-old"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Internally we will be playing with an element that will always have a key defined.
 */

/**
 * Internal data passed to child motions.
 */

// We define empty context here so the object doesn't change.
var emptyContext = exports.emptyContext = {
  // Motions will always appear if not inside a exiting persistence component.
  appear: true,
  isExiting: false
};

/**
 * __Exiting context__
 *
 * An exiting context.
 */
var ExitingContext = exports.ExitingContext = /*#__PURE__*/(0, _react.createContext)(emptyContext);

/**
 * This method will wrap any React element with a context provider. We're using context (instead of
 * cloneElement) so we can communicate between multiple elements without the need of prop drilling
 * (results in a better API for consumers).
 */
var wrapChildWithContextProvider = exports.wrapChildWithContextProvider = function wrapChildWithContextProvider(child) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyContext;
  return /*#__PURE__*/_react.default.createElement(ExitingContext.Provider, {
    key: "".concat(child.key, "-provider"),
    value: value
  }, child);
};

/**
 * This function will convert all children types to an array while also filtering out non-valid React elements.
 */
var childrenToArray = exports.childrenToArray = function childrenToArray(children) {
  var childrenAsArray = [];

  // We convert children to an array using this helper method as it will add keys to children that do not
  // have them, such as when we have hardcoded children that are conditionally rendered.
  _react.Children.toArray(children).forEach(function (child) {
    // We ignore any boolean children to make our code a little more simple later on,
    // and also filter out any falsies (empty strings, nulls, and undefined).
    if (typeof child !== 'boolean' && Boolean(child)) {
      // Children WILL have a key after being forced into an array using the React.Children helper.
      childrenAsArray.push(child);
    }
  });
  return childrenAsArray;
};
var spliceNewElementsIntoPrevious = exports.spliceNewElementsIntoPrevious = function spliceNewElementsIntoPrevious(current, previous) {
  var splicedChildren = previous.concat([]);
  var previousMap = childrenToObj(previous);
  for (var i = 0; i < current.length; i++) {
    var child = current[i];
    var childIsNew = !previousMap[child.key];
    if (childIsNew) {
      // This will insert the new element after the previous element.
      splicedChildren.splice(i + 1, 0, child);
    }
  }
  return splicedChildren;
};
var childrenToObj = exports.childrenToObj = function childrenToObj(children) {
  return children.reduce(function (acc, child) {
    acc[child.key] = child;
    return acc;
  }, {});
};

/**
 * __ExitingPersistence__
 *
 * Useful for enabling elements to persist and animate away when they are removed from the DOM.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/motion/docs/entering-motions)
 */
var ExitingPersistence = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var _ref$appear = _ref.appear,
    appear = _ref$appear === void 0 ? false : _ref$appear,
    children = _ref.children,
    exitThenEnter = _ref.exitThenEnter;
  return (0, _platformFeatureFlags.getBooleanFF)('platform.design-system-team.update-motion-for-strict-mode_p6qs0') ? /*#__PURE__*/_react.default.createElement(_exitMotionNew.default, {
    appear: appear,
    children: children,
    exitThenEnter: exitThenEnter
  }) : /*#__PURE__*/_react.default.createElement(_exitMotionOld.default, {
    appear: appear,
    children: children,
    exitThenEnter: exitThenEnter
  });
});
var useExitingPersistence = exports.useExitingPersistence = function useExitingPersistence() {
  return (0, _react.useContext)(ExitingContext);
};
ExitingPersistence.displayName = 'ExitingPersistence';
var _default = exports.default = ExitingPersistence;