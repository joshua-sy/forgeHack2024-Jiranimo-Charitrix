/**
 * @jsxRuntime classic
 */
/** @jsx jsx */
import { memo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { Box, xcss } from '@atlaskit/primitives';
const baseStyles = xcss({
  display: 'inline-flex',
  borderRadius: 'border.radius',
  blockSize: 'min-content',
  position: 'static',
  overflow: 'hidden'
});
const textStyles = css({
  fontFamily: 'ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, system-ui, "Helvetica Neue", sans-serif',
  fontSize: '11px',
  fontStyle: 'normal',
  fontWeight: "var(--ds-font-weight-bold, 700)",
  lineHeight: '16px',
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  textTransform: 'uppercase',
  whiteSpace: 'nowrap'
});
/**
 * __Lozenge__
 *
 * A lozenge is a visual indicator used to highlight an item's status for quick recognition.
 *
 * - [Examples](https://atlassian.design/components/lozenge/examples)
 * - [Code](https://atlassian.design/components/lozenge/code)
 * - [Usage](https://atlassian.design/components/lozenge/usage)
 */
const Lozenge = /*#__PURE__*/memo(({
  children,
  testId,
  isBold = false,
  appearance = 'default',
  maxWidth = 200,
  style
}) => {
  const appearanceStyle = isBold ? 'bold' : 'subtle';
  const appearanceType = appearance in backgroundColors[appearanceStyle] ? appearance : 'default';
  const maxWidthValue = typeof maxWidth === 'string' ? maxWidth : `${maxWidth}px`;
  const maxWidthIsPc = typeof maxWidth === 'string' && /%$/.test(maxWidth);
  return jsx(Box, {
    as: "span",
    backgroundColor: backgroundColors[appearanceStyle][appearanceType],
    style: {
      backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor,
      maxWidth: maxWidthIsPc ? maxWidth : '100%'
    },
    paddingInline: "space.050",
    xcss: baseStyles,
    testId: testId
  }, jsx("span", {
    css: [textStyles, textColors[appearanceStyle][appearanceType]],
    style: {
      color: style === null || style === void 0 ? void 0 : style.color,
      // to negate paddingInline specified on Box above
      maxWidth: maxWidthIsPc ? '100%' : `calc(${maxWidthValue} - ${"var(--ds-space-100, 8px)"})`
    },
    "data-testid": testId && `${testId}--text`
  }, children));
});
Lozenge.displayName = 'Lozenge';
export default Lozenge;
const backgroundColors = {
  bold: {
    default: 'color.background.neutral.bold',
    inprogress: 'color.background.information.bold',
    moved: 'color.background.warning.bold',
    new: 'color.background.discovery.bold',
    removed: 'color.background.danger.bold',
    success: 'color.background.success.bold'
  },
  subtle: {
    default: 'color.background.neutral',
    inprogress: 'color.background.information',
    moved: 'color.background.warning',
    new: 'color.background.discovery',
    removed: 'color.background.danger',
    success: 'color.background.success'
  }
};
const textColors = {
  bold: {
    default: css({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    inprogress: css({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    moved: css({
      color: "var(--ds-text-warning-inverse, #172B4D)"
    }),
    new: css({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    removed: css({
      color: "var(--ds-text-inverse, #FFFFFF)"
    }),
    success: css({
      color: "var(--ds-text-inverse, #FFFFFF)"
    })
  },
  subtle: {
    default: css({
      color: "var(--ds-text-subtle, #42526E)"
    }),
    inprogress: css({
      color: "var(--ds-text-information, #0052CC)"
    }),
    moved: css({
      color: "var(--ds-text-warning, #974F0C)"
    }),
    new: css({
      color: "var(--ds-text-discovery, #403294)"
    }),
    removed: css({
      color: "var(--ds-text-danger, #DE350B)"
    }),
    success: css({
      color: "var(--ds-text-success, #006644)"
    })
  }
};