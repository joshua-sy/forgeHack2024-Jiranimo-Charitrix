import _extends from "@babel/runtime/helpers/extends";
/**
 * @jsxRuntime classic
 */
/** @jsx jsx */
import { forwardRef, memo } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next/usePlatformLeafEventHandler';
import __noop from '@atlaskit/ds-lib/noop';
import { B200, B300, B400, B50, N10, N100, N20, N30, N70, N80, N900, R300 } from '@atlaskit/theme/colors';
const packageName = "@atlaskit/radio";
const packageVersion = "6.4.0";
const noop = __noop;
const labelPaddingStyles = css({
  padding: `${"var(--ds-space-025, 2px)"} ${"var(--ds-space-050, 4px)"}`
});
const labelStyles = css({
  display: 'flex',
  boxSizing: 'border-box',
  position: 'relative',
  alignItems: 'flex-start',
  color: `var(--ds-text, ${N900})`,
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '&[data-disabled]': {
    color: `var(--ds-text-disabled, ${N80})`,
    cursor: 'not-allowed'
  }
});
const radioStyles = css({
  display: 'flex',
  // TODO https://product-fabric.atlassian.net/browse/DSP-10507 revisit and remove the scale of 14/24
  /*
     The circle should be 14px * 14px centred in a 24px * 24px box.
     This is inclusive of a 2px border and inner circle with 2px radius.
     There is a Chrome bug that makes the circle become an oval and the
     inner circle not be centred at various zoom levels. This bug is fixed
     in all browsers if a scale of 14/24 is applied.
   */
  width: '24px',
  height: '24px',
  margin: "var(--ds-space-0, 0px)",
  position: 'relative',
  alignItems: 'center',
  justifyContent: 'center',
  flexShrink: 0,
  backgroundColor: 'var(--radio-background-color)',
  /* Border should multiply by 24/14 to offset scale, a scale of 12 / 7 is to fix a Chrome bug that makes the circle become an oval and the
     inner circle not be centred at various zoom levels */
  border: `${"var(--ds-border-width, 1px)"} solid var(--radio-border-color)`,
  borderRadius: "var(--ds-border-radius-circle, 50%)",
  MozAppearance: 'none',
  outline: 'none',
  /*
     Change the variables --radio-background-color, --radio-border-color,
     -radio-dot-color and -radio-dot-opacity according to user interactions.
     All other variables are constant
   */
  '--radio-background-color': `var(--ds-background-input, ${N10})`,
  '--radio-border-color': `var(--ds-border-input, ${N100})`,
  '--radio-dot-color': `var(--ds-icon-inverse, ${N10})`,
  '--radio-dot-opacity': 0,
  /* 24px * 7 / 12 === 14px height and width */
  transform: 'scale(calc(7 / 12))',
  transition: 'border-color 0.2s ease-in-out, background-color 0.2s ease-in-out',
  verticalAlign: 'top',
  WebkitAppearance: 'none',
  '&::after': {
    /* Height and width should by 4px, multiply by 24/14 to offset scale */
    width: 'calc(4px * 12 / 7)',
    height: 'calc(4px * 12 / 7)',
    position: 'absolute',
    background: 'var(--radio-dot-color)',
    // TODO Delete this comment after verifying spacing token -> previous value `'50%'`
    borderRadius: "var(--ds-border-radius-circle, 50%)",
    content: "''",
    opacity: 'var(--radio-dot-opacity)',
    transition: 'background-color 0.2s ease-in-out, opacity 0.2s ease-in-out'
  },
  '&:hover': {
    '--radio-background-color': `var(--ds-background-input-hovered, ${N30})`,
    '--radio-border-color': `var(--ds-border-input, ${N100})`
  },
  '&:active': {
    '--radio-background-color': `var(--ds-background-input-pressed, ${N30})`
  },
  '&:focus': {
    outline: `${"var(--ds-border-width-outline, 3px)"} solid ${`var(--ds-border-focused, ${B200})`}`,
    outlineOffset: "var(--ds-border-width-indicator, 3px)"
  },
  '&:checked': {
    '--radio-background-color': `var(--ds-background-selected-bold, ${B400})`,
    '--radio-border-color': `var(--ds-background-selected-bold, ${B400})`,
    '--radio-dot-opacity': 1
  },
  '&:checked:hover': {
    '--radio-background-color': `var(--ds-background-selected-bold-hovered, ${B300})`,
    '--radio-border-color': `var(--ds-background-selected-bold-hovered, ${B300})`
  },
  '&:checked:active': {
    '--radio-background-color': `var(--ds-background-selected-bold-pressed, ${B50})`,
    '--radio-border-color': `var(--ds-border-input, ${N100})`,
    '--radio-dot-color': `var(--ds-icon-inverse, ${B400})`
  },
  '&:checked:focus': {
    outline: `${"var(--ds-border-width-outline, 3px)"} solid ${`var(--ds-border-focused, ${B200})`}`,
    outlineOffset: "var(--ds-border-width-indicator, 3px)"
  },
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '&[data-invalid], &:checked[data-invalid]': {
    '--radio-border-color': `var(--ds-icon-danger, ${R300})`
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '&:disabled, &:disabled:hover, &:disabled:focus, &:disabled:active, &:disabled[data-invalid]': {
    cursor: 'not-allowed',
    '--radio-background-color': `var(--ds-background-disabled, ${N20})`,
    '--radio-border-color': `var(--ds-border-disabled, ${N20})`,
    '--radio-dot-color': `var(--ds-icon-disabled, ${N70})`
  }
});
const InnerRadio = /*#__PURE__*/forwardRef(function Radio(props, ref) {
  const {
    ariaLabel,
    isDisabled = false,
    isRequired,
    isInvalid = false,
    isChecked = false,
    label,
    name,
    onChange = noop,
    value,
    testId,
    analyticsContext,
    // events and all other input props
    ...rest
  } = props;
  const onChangeAnalytics = usePlatformLeafEventHandler({
    fn: onChange,
    action: 'changed',
    analyticsData: analyticsContext,
    componentName: 'radio',
    packageName,
    packageVersion
  });
  return jsx("label", {
    "data-testid": testId && `${testId}--radio-label`,
    "data-disabled": isDisabled ? 'true' : undefined,
    css: labelStyles
  }, jsx("input", _extends({}, rest, {
    // It is necessary only for Safari. It allows to render focus styles.
    tabIndex: 0,
    "aria-label": ariaLabel,
    checked: isChecked,
    disabled: isDisabled,
    name: name,
    onChange: onChangeAnalytics,
    required: isRequired,
    type: "radio",
    value: value,
    "data-testid": testId && `${testId}--radio-input`
    // isInvalid is used in a nonstandard way so cannot
    // use :invalid selector
    ,
    "data-invalid": isInvalid ? 'true' : undefined,
    css: radioStyles,
    ref: ref
  })), label ? jsx("span", {
    css: labelPaddingStyles
  }, label) : null);
});

/**
 * __Radio__
 *
 * A radio input allows users to select only one option from a number of choices. Radio is generally displayed in a radio group.
 *
 * - [Examples](https://atlassian.design/components/radio/examples)
 * - [Code](https://atlassian.design/components/radio/code)
 * - [Usage](https://atlassian.design/components/radio/usage)
 */
const Radio = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Radio(props, ref) {
  return jsx(InnerRadio, _extends({}, props, {
    ref: ref
  }));
}));
export default Radio;