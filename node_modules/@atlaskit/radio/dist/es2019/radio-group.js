import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useState } from 'react';
import noop from '@atlaskit/ds-lib/noop';
import Radio from './radio';
const noOptions = [];
export default function RadioGroup(props) {
  const {
    onChange,
    options = noOptions,
    value: propValue,
    defaultValue,
    isDisabled,
    isRequired,
    isInvalid,
    onInvalid = noop,
    name,
    analyticsContext,
    ['aria-labelledby']: ariaLabelledBy,
    testId
  } = props;
  const [selectedValue, setSelectedValue] = useState(propValue !== undefined ? propValue : defaultValue);
  const onRadioChange = useCallback((e, analyticsEvent) => {
    setSelectedValue(e.currentTarget.value);
    if (onChange) {
      onChange(e, analyticsEvent);
    }
  }, [onChange]);

  // If propValue is provided than act as a controlled component
  // If not then act as an uncontrolled component using the value from state
  const value = typeof propValue !== 'undefined' ? propValue : selectedValue;
  return /*#__PURE__*/React.createElement("div", {
    role: "radiogroup",
    "aria-labelledby": ariaLabelledBy,
    "data-testid": testId
  }, options.map(({
    ...optionProps
  }, index) => {
    if (typeof isDisabled !== 'undefined') {
      optionProps.isDisabled = isDisabled;
    }
    const isChecked = value !== null && optionProps.value === value;
    return /*#__PURE__*/React.createElement(Radio, _extends({}, optionProps, {
      name: name || optionProps.name,
      key: index,
      onChange: onRadioChange,
      onInvalid: onInvalid,
      isInvalid: isChecked && isInvalid,
      isChecked: isChecked,
      testId: optionProps.testId || testId,
      isRequired: isRequired,
      analyticsContext: analyticsContext
    }));
  }));
}