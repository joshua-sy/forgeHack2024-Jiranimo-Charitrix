import _defineProperty from "@babel/runtime/helpers/defineProperty";
/* eslint-disable @atlaskit/design-system/ensure-design-token-usage */
/**
 * @jsxRuntime classic
 */
/** @jsx jsx */
import React, { forwardRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { Box, Inline, xcss } from '@atlaskit/primitives';
import { N0, N500, N700, R400, Y300 } from '@atlaskit/theme/colors';
var CSS_VAR_TEXT_COLOR = '--banner-text-color';
var inlineStyles = xcss({
  minWidth: '0'
});
var textStyles = css({
  color: "var(".concat(CSS_VAR_TEXT_COLOR, ")"),
  fontWeight: "var(--ds-font-weight-medium, 500)",
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/design-system/no-nested-styles
  'a, a:visited, a:hover, a:focus, a:active': {
    color: 'currentColor',
    textDecoration: 'underline'
  }
});
var backgroundColors = {
  warning: 'color.background.warning.bold',
  error: 'color.background.danger.bold',
  announcement: 'color.background.neutral.bold'
};
var tokenBackgroundColors = {
  warning: "var(--ds-background-warning-bold, ".concat(Y300, ")"),
  error: "var(--ds-background-danger-bold, ".concat(R400, ")"),
  announcement: "var(--ds-background-neutral-bold, ".concat(N500, ")")
};
var tokenTextColors = {
  warning: "var(--ds-text-warning-inverse, ".concat(N700, ")"),
  error: "var(--ds-text-inverse, ".concat(N0, ")"),
  announcement: "var(--ds-text-inverse, ".concat(N0, ")")
};
var containerStyles = xcss({
  height: '3rem',
  alignItems: 'center',
  display: 'flex'
});
var iconWrapperStyles = xcss({
  display: 'block',
  width: '1.5rem',
  height: '1.5rem',
  // This matches Icon's "medium" size, without this the (line-)height is greater than that of the Icon
  flexShrink: '0'
});
/**
 * __Banner__
 *
 * A banner displays a prominent message at the top of the screen.
 *
 * - [Examples](https://atlassian.design/components/banner/examples)
 * - [Code](https://atlassian.design/components/banner/code)
 * - [Usage](https://atlassian.design/components/banner/usage)
 */
var Banner = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'warning' : _ref$appearance,
    children = _ref.children,
    icon = _ref.icon,
    testId = _ref.testId;
  var appearanceType = appearance in backgroundColors ? appearance : 'warning';
  return jsx(Box, {
    xcss: containerStyles,
    backgroundColor: backgroundColors[appearanceType],
    padding: "space.150",
    testId: testId,
    ref: ref,
    role: "alert"
  }, jsx(Inline, {
    space: "space.050",
    alignBlock: "center",
    alignInline: "start",
    xcss: inlineStyles
  }, icon ? jsx(Box, {
    as: "span",
    xcss: iconWrapperStyles,
    style: {
      fill: tokenBackgroundColors[appearanceType],
      color: tokenTextColors[appearanceType]
    }
  }, icon) : null, jsx("span", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    style: _defineProperty({}, CSS_VAR_TEXT_COLOR, tokenTextColors[appearanceType]),
    css: textStyles
  }, children)));
});
export default Banner;