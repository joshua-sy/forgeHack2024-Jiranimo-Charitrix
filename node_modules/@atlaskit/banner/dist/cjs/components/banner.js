"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _primitives = require("@atlaskit/primitives");
var _colors = require("@atlaskit/theme/colors");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/* eslint-disable @atlaskit/design-system/ensure-design-token-usage */
/**
 * @jsxRuntime classic
 */
/** @jsx jsx */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var CSS_VAR_TEXT_COLOR = '--banner-text-color';
var inlineStyles = (0, _primitives.xcss)({
  minWidth: '0'
});
var textStyles = (0, _react2.css)({
  color: "var(".concat(CSS_VAR_TEXT_COLOR, ")"),
  fontWeight: "var(--ds-font-weight-medium, 500)",
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors, @atlaskit/design-system/no-nested-styles
  'a, a:visited, a:hover, a:focus, a:active': {
    color: 'currentColor',
    textDecoration: 'underline'
  }
});
var backgroundColors = {
  warning: 'color.background.warning.bold',
  error: 'color.background.danger.bold',
  announcement: 'color.background.neutral.bold'
};
var tokenBackgroundColors = {
  warning: "var(--ds-background-warning-bold, ".concat(_colors.Y300, ")"),
  error: "var(--ds-background-danger-bold, ".concat(_colors.R400, ")"),
  announcement: "var(--ds-background-neutral-bold, ".concat(_colors.N500, ")")
};
var tokenTextColors = {
  warning: "var(--ds-text-warning-inverse, ".concat(_colors.N700, ")"),
  error: "var(--ds-text-inverse, ".concat(_colors.N0, ")"),
  announcement: "var(--ds-text-inverse, ".concat(_colors.N0, ")")
};
var containerStyles = (0, _primitives.xcss)({
  height: '3rem',
  alignItems: 'center',
  display: 'flex'
});
var iconWrapperStyles = (0, _primitives.xcss)({
  display: 'block',
  width: '1.5rem',
  height: '1.5rem',
  // This matches Icon's "medium" size, without this the (line-)height is greater than that of the Icon
  flexShrink: '0'
});
/**
 * __Banner__
 *
 * A banner displays a prominent message at the top of the screen.
 *
 * - [Examples](https://atlassian.design/components/banner/examples)
 * - [Code](https://atlassian.design/components/banner/code)
 * - [Usage](https://atlassian.design/components/banner/usage)
 */
var Banner = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'warning' : _ref$appearance,
    children = _ref.children,
    icon = _ref.icon,
    testId = _ref.testId;
  var appearanceType = appearance in backgroundColors ? appearance : 'warning';
  return (0, _react2.jsx)(_primitives.Box, {
    xcss: containerStyles,
    backgroundColor: backgroundColors[appearanceType],
    padding: "space.150",
    testId: testId,
    ref: ref,
    role: "alert"
  }, (0, _react2.jsx)(_primitives.Inline, {
    space: "space.050",
    alignBlock: "center",
    alignInline: "start",
    xcss: inlineStyles
  }, icon ? (0, _react2.jsx)(_primitives.Box, {
    as: "span",
    xcss: iconWrapperStyles,
    style: {
      fill: tokenBackgroundColors[appearanceType],
      color: tokenTextColors[appearanceType]
    }
  }, icon) : null, (0, _react2.jsx)("span", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    style: (0, _defineProperty2.default)({}, CSS_VAR_TEXT_COLOR, tokenTextColors[appearanceType]),
    css: textStyles
  }, children)));
});
var _default = exports.default = Banner;