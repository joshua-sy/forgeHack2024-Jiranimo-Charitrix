import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
/* eslint-disable @atlaskit/design-system/no-nested-styles */
/**
 * @jsxRuntime classic
 */
/** @jsx jsx */
import { PureComponent } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { CSSTransition } from 'react-transition-group';
import { Box, xcss } from '@atlaskit/primitives';
import ProgressBar from './bar';
import { LABEL_TOP_SPACING, varBackgroundColor, varMarkerColor, varTransitionDelay, varTransitionEasing, varTransitionSpeed } from './constants';
import ProgressMarker from './marker';
import { getFontWeight, getMarkerColor, getTextColor } from './utils';
var listItemContentStyles = xcss({
  width: '100%',
  position: 'relative'
});
var listItemStyles = css({
  margin: "var(--ds-space-0, 0px)",
  overflowWrap: 'break-word'
});
var titleStyles = css({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  marginBlockStart: LABEL_TOP_SPACING,
  textAlign: 'center',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '&.fade-appear': {
    opacity: 0.01
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '&.fade-appear.fade-appear-active': {
    opacity: 1,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    transition: "opacity var(".concat(varTransitionSpeed, ") cubic-bezier(0.2, 0, 0, 1)")
  }
});
var ProgressTrackerStage = /*#__PURE__*/function (_PureComponent) {
  _inherits(ProgressTrackerStage, _PureComponent);
  var _super = _createSuper(ProgressTrackerStage);
  function ProgressTrackerStage(props) {
    var _this;
    _classCallCheck(this, ProgressTrackerStage);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "onEntered", function () {
      _this.setState({
        transitioning: false,
        oldMarkerColor: getMarkerColor(_this.props.item.status),
        oldPercentageComplete: _this.props.item.percentageComplete
      });
    });
    _this.state = {
      transitioning: false,
      oldMarkerColor: getMarkerColor(_this.props.item.status),
      oldPercentageComplete: 0
    };
    return _this;
  }
  _createClass(ProgressTrackerStage, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {
        transitioning: true
      }));
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps() {
      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {
        transitioning: true
      }));
    }
  }, {
    key: "shouldShowLink",
    value: function shouldShowLink() {
      return this.props.item.status === 'visited' && !this.props.item.noLink;
    }
  }, {
    key: "render",
    value: function render() {
      var _listInlineStyles;
      var _this$props = this.props,
        item = _this$props.item,
        render = _this$props.render,
        transitionDelay = _this$props.transitionDelay,
        transitionSpeed = _this$props.transitionSpeed,
        transitionEasing = _this$props.transitionEasing,
        testId = _this$props.testId;
      var ariaCurrent = item.status === 'current' ? 'step' : 'false';
      var listInlineStyles = (_listInlineStyles = {}, _defineProperty(_listInlineStyles, varTransitionSpeed, "".concat(transitionSpeed, "ms")), _defineProperty(_listInlineStyles, varTransitionDelay, "".concat(transitionDelay, "ms")), _defineProperty(_listInlineStyles, varTransitionEasing, transitionEasing), _defineProperty(_listInlineStyles, varMarkerColor, this.state.oldMarkerColor), _defineProperty(_listInlineStyles, varBackgroundColor, getMarkerColor(item.status)), _listInlineStyles);
      return jsx("li", {
        "data-testid": testId
        // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
        ,
        style: listInlineStyles,
        css: listItemStyles,
        "aria-current": ariaCurrent
      }, jsx(Box, {
        xcss: listItemContentStyles
      }, jsx(CSSTransition, {
        appear: true,
        in: this.state.transitioning,
        onEntered: this.onEntered,
        timeout: transitionDelay + transitionSpeed,
        classNames: "fade"
      }, jsx(ProgressMarker, {
        testId: testId && "".concat(testId, "-marker")
      })), jsx(CSSTransition, {
        appear: true,
        in: this.state.transitioning,
        onEntered: this.onEntered,
        timeout: transitionDelay + transitionSpeed,
        classNames: "fade"
      }, jsx(ProgressBar, {
        testId: testId && "".concat(testId, "-bar"),
        percentageComplete: item.percentageComplete
      })), jsx(CSSTransition, {
        appear: true,
        in: this.state.transitioning,
        onEntered: this.onEntered,
        timeout: transitionDelay + transitionSpeed,
        classNames: "fade"
      }, jsx("div", {
        css: titleStyles,
        style: {
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          color: getTextColor(item.status),
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
          fontWeight: getFontWeight(item.status)
        },
        "data-testid": testId && "".concat(testId, "-title")
      }, this.shouldShowLink() ? render.link({
        item: item
      }) : item.label))));
    }
  }]);
  return ProgressTrackerStage;
}(PureComponent);
export { ProgressTrackerStage as default };