import _defineProperty from "@babel/runtime/helpers/defineProperty";
/* eslint-disable @atlaskit/design-system/no-nested-styles */
/**
 * @jsxRuntime classic
 */
/** @jsx jsx */
import { PureComponent } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { CSSTransition } from 'react-transition-group';
import { Box, xcss } from '@atlaskit/primitives';
import ProgressBar from './bar';
import { LABEL_TOP_SPACING, varBackgroundColor, varMarkerColor, varTransitionDelay, varTransitionEasing, varTransitionSpeed } from './constants';
import ProgressMarker from './marker';
import { getFontWeight, getMarkerColor, getTextColor } from './utils';
const listItemContentStyles = xcss({
  width: '100%',
  position: 'relative'
});
const listItemStyles = css({
  margin: "var(--ds-space-0, 0px)",
  overflowWrap: 'break-word'
});
const titleStyles = css({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  marginBlockStart: LABEL_TOP_SPACING,
  textAlign: 'center',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '&.fade-appear': {
    opacity: 0.01
  },
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  '&.fade-appear.fade-appear-active': {
    opacity: 1,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    transition: `opacity var(${varTransitionSpeed}) cubic-bezier(0.2, 0, 0, 1)`
  }
});
export default class ProgressTrackerStage extends PureComponent {
  constructor(props) {
    super(props);
    _defineProperty(this, "onEntered", () => {
      this.setState({
        transitioning: false,
        oldMarkerColor: getMarkerColor(this.props.item.status),
        oldPercentageComplete: this.props.item.percentageComplete
      });
    });
    this.state = {
      transitioning: false,
      oldMarkerColor: getMarkerColor(this.props.item.status),
      oldPercentageComplete: 0
    };
  }
  UNSAFE_componentWillMount() {
    this.setState({
      ...this.state,
      transitioning: true
    });
  }
  UNSAFE_componentWillReceiveProps() {
    this.setState({
      ...this.state,
      transitioning: true
    });
  }
  shouldShowLink() {
    return this.props.item.status === 'visited' && !this.props.item.noLink;
  }
  render() {
    const {
      item,
      render,
      transitionDelay,
      transitionSpeed,
      transitionEasing,
      testId
    } = this.props;
    const ariaCurrent = item.status === 'current' ? 'step' : 'false';
    const listInlineStyles = {
      [varTransitionSpeed]: `${transitionSpeed}ms`,
      [varTransitionDelay]: `${transitionDelay}ms`,
      [varTransitionEasing]: transitionEasing,
      [varMarkerColor]: this.state.oldMarkerColor,
      [varBackgroundColor]: getMarkerColor(item.status)
    };
    return jsx("li", {
      "data-testid": testId
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      ,
      style: listInlineStyles,
      css: listItemStyles,
      "aria-current": ariaCurrent
    }, jsx(Box, {
      xcss: listItemContentStyles
    }, jsx(CSSTransition, {
      appear: true,
      in: this.state.transitioning,
      onEntered: this.onEntered,
      timeout: transitionDelay + transitionSpeed,
      classNames: "fade"
    }, jsx(ProgressMarker, {
      testId: testId && `${testId}-marker`
    })), jsx(CSSTransition, {
      appear: true,
      in: this.state.transitioning,
      onEntered: this.onEntered,
      timeout: transitionDelay + transitionSpeed,
      classNames: "fade"
    }, jsx(ProgressBar, {
      testId: testId && `${testId}-bar`,
      percentageComplete: item.percentageComplete
    })), jsx(CSSTransition, {
      appear: true,
      in: this.state.transitioning,
      onEntered: this.onEntered,
      timeout: transitionDelay + transitionSpeed,
      classNames: "fade"
    }, jsx("div", {
      css: titleStyles,
      style: {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        color: getTextColor(item.status),
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
        fontWeight: getFontWeight(item.status)
      },
      "data-testid": testId && `${testId}-title`
    }, this.shouldShowLink() ? render.link({
      item
    }) : item.label))));
  }
}