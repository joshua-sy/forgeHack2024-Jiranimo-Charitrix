"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyntaxHighlighter = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
// This wrapper supports the async loading of refractor and language grammars. The internal Highlight is a memo() functional component as expected
// eslint-disable-next-line @repo/internal/react/no-class-components
var SyntaxHighlighter = exports.SyntaxHighlighter = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inherits2.default)(SyntaxHighlighter, _React$PureComponent);
  var _super = _createSuper(SyntaxHighlighter);
  function SyntaxHighlighter() {
    (0, _classCallCheck2.default)(this, SyntaxHighlighter);
    return _super.apply(this, arguments);
  }
  return (0, _createClass2.default)(SyntaxHighlighter);
}(_react.default.PureComponent);
/**
 * Function that receives current line number as argument and returns a
 * line props object to be applied to each `span` wrapping code line.
 */
/**
 * Props to be passed to the `span` wrapping each code line. Can be an
 * object or a function that receives current line number as argument and
 * returns a props object.
 */