import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import React from 'react';
import highlight from './lib/highlight';
// Uses the loader method of async bundling
// Instantiates highligher as a singleton, loading refractor only once per page (refractor/prism are singleton modules)
var generator = function generator(options) {
  var loader = options.loader;

  // eslint-disable-next-line @repo/internal/react/no-class-components
  var AsyncHighlighter = /*#__PURE__*/function (_React$PureComponent) {
    _inherits(AsyncHighlighter, _React$PureComponent);
    var _super = _createSuper(AsyncHighlighter);
    function AsyncHighlighter() {
      _classCallCheck(this, AsyncHighlighter);
      return _super.apply(this, arguments);
    }
    _createClass(AsyncHighlighter, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this = this;
        if (!AsyncHighlighter.astGeneratorPromise) {
          AsyncHighlighter.loadAstGenerator();
        }
        if (!AsyncHighlighter.astGenerator && AsyncHighlighter.astGeneratorPromise) {
          AsyncHighlighter.astGeneratorPromise.then(function () {
            _this.forceUpdate();
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(AsyncHighlighter.highlightInstance, _extends({}, this.props, {
          astGenerator: AsyncHighlighter.astGenerator
        }));
      }
    }], [{
      key: "preload",
      value:
      // Useful in tests
      function preload() {
        return AsyncHighlighter.loadAstGenerator();
      }
    }, {
      key: "loadAstGenerator",
      value: function loadAstGenerator() {
        AsyncHighlighter.astGeneratorPromise = loader().then(function (astGenerator) {
          AsyncHighlighter.astGenerator = astGenerator;
          return astGenerator;
        });
        return AsyncHighlighter.astGeneratorPromise;
      }
    }]);
    return AsyncHighlighter;
  }(React.PureComponent);
  _defineProperty(AsyncHighlighter, "astGenerator", null);
  _defineProperty(AsyncHighlighter, "highlightInstance", highlight);
  return AsyncHighlighter;
};
export default generator({
  loader: function loader() {
    return import( /* webpackChunkName: "@atlaskit-internal_refractor-import" */
    'refractor').then(function (module) {
      // Webpack 3 returns module.exports as default as module, but webpack 4 returns module.exports as module.default
      return module.default || module;
    });
  }
});