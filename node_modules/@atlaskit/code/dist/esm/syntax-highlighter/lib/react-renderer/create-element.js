import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import CodeBidiWarning from '../../../bidi-warning';
import codeBidiWarningDecorator from '../../../bidi-warning/bidi-warning-decorator';
import createChildren from './create-children';
function createClassNameString(classNames) {
  return classNames ? classNames.join(' ') : '';
}

// NOTE: This is a function call rather than a React component because, for
// unknown reasons, it appears to be more performant. We tried and measured both
// and this stacks up better than as a memoised React component. Something to look
// into in the future.
export default function createElement(_ref) {
  var node = _ref.node,
    codeBidiWarningConfig = _ref.codeBidiWarningConfig,
    key = _ref.key;
  if (node.type === 'text') {
    var value = node.value;
    // occasionally a numeric value is passed when the type is text
    var textValue = "".concat(value);
    if (codeBidiWarningConfig.codeBidiWarnings) {
      var decorated = codeBidiWarningDecorator(textValue, function (_ref2) {
        var bidiCharacter = _ref2.bidiCharacter,
          index = _ref2.index;
        return /*#__PURE__*/React.createElement(CodeBidiWarning, {
          bidiCharacter: bidiCharacter,
          key: index,
          label: codeBidiWarningConfig.codeBidiWarningLabel,
          tooltipEnabled: codeBidiWarningConfig.codeBidiWarningTooltipEnabled
        });
      });
      return decorated;
    }
    return textValue;
  } else {
    var properties = node.properties,
      tagName = node.tagName;
    var childrenCreator = createChildren(codeBidiWarningConfig);
    var props = _objectSpread(_objectSpread({}, properties), {}, {
      className: createClassNameString(properties.className)
    });
    var children = childrenCreator(node.children);
    return /*#__PURE__*/React.createElement(tagName, _objectSpread({
      key: key
    }, props), children);
  }
}