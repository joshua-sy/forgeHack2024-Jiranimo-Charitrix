import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * @jsxRuntime classic
 */
/** @jsx jsx */
import { memo, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { jsx } from '@emotion/react';
import { IconButton } from '@atlaskit/button/new';
import Heading from '@atlaskit/heading';
import ArrowleftIcon from '@atlaskit/icon/glyph/chevron-left-large';
import ArrowrightIcon from '@atlaskit/icon/glyph/chevron-right-large';
import { Box, Inline } from '@atlaskit/primitives';
import useUniqueId from '../../internal/hooks/use-unique-id';
var Header = /*#__PURE__*/memo(function Header(_ref) {
  var monthLongTitle = _ref.monthLongTitle,
    year = _ref.year,
    _ref$previousMonthLab = _ref.previousMonthLabel,
    previousMonthLabel = _ref$previousMonthLab === void 0 ? 'Previous month' : _ref$previousMonthLab,
    previousHeading = _ref.previousHeading,
    _ref$nextMonthLabel = _ref.nextMonthLabel,
    nextMonthLabel = _ref$nextMonthLabel === void 0 ? 'Next month' : _ref$nextMonthLabel,
    nextHeading = _ref.nextHeading,
    handleClickPrev = _ref.handleClickPrev,
    handleClickNext = _ref.handleClickNext,
    headerId = _ref.headerId,
    tabIndex = _ref.tabIndex,
    testId = _ref.testId;
  var announceId = useUniqueId('month-year-announce');

  // All of this is because `aria-atomic` is not fully supported for different
  // assistive technologies. We want the value of the current month and year to
  // be announced, but *only* if that value has been interacted with since
  // being mounted. This allows us to conditionally apply the `aria-live`
  // attribute.  Without this, the `aria-live` property is set on mount and
  // overrides the default input's readout in downstream consumers (e.g.
  // datetime picker).
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    hasInteractedWithMonth = _useState2[0],
    setHasInteractedWithMonth = _useState2[1];
  var handlePrevMonthInteraction = function handlePrevMonthInteraction(e) {
    if (!hasInteractedWithMonth) {
      setHasInteractedWithMonth(true);
    }
    handleClickPrev(e);
  };
  var handleNextMonthInteraction = function handleNextMonthInteraction(e) {
    if (!hasInteractedWithMonth) {
      setHasInteractedWithMonth(true);
    }
    handleClickNext(e);
  };
  return jsx(Box, {
    paddingInline: "space.100"
  }, jsx(Inline, {
    space: "space.0",
    alignBlock: "center",
    spread: "space-between"
  }, jsx(IconButton, {
    appearance: "subtle",
    spacing: "compact",
    tabIndex: tabIndex,
    onClick: handlePrevMonthInteraction,
    testId: testId && "".concat(testId, "--previous-month"),
    icon: ArrowleftIcon,
    label: "".concat(previousMonthLabel, ", ").concat(previousHeading)
  }), jsx(Box, {
    "aria-live": hasInteractedWithMonth ? 'polite' : undefined,
    id: announceId,
    testId: testId && "".concat(testId, "--current-month-year--container")
  }, jsx(Heading, {
    size: "xsmall",
    as: "h2",
    id: headerId,
    testId: testId && "".concat(testId, "--current-month-year")
  }, "".concat(monthLongTitle, " ").concat(year))), jsx(IconButton, {
    appearance: "subtle",
    spacing: "compact",
    tabIndex: tabIndex,
    onClick: handleNextMonthInteraction,
    testId: testId && "".concat(testId, "--next-month"),
    icon: ArrowrightIcon,
    label: "".concat(nextMonthLabel, ", ").concat(nextHeading)
  })));
});
Header.displayName = 'Header';

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default Header;