"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _usePlatformLeafEventHandler = require("@atlaskit/analytics-next/usePlatformLeafEventHandler");
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
var _primitives = require("@atlaskit/primitives");
var _header = _interopRequireDefault(require("./internal/components/header"));
var _weekDays = _interopRequireDefault(require("./internal/components/week-days"));
var _weekHeader = _interopRequireDefault(require("./internal/components/week-header"));
var _constants = require("./internal/constants");
var _useCalendarRef = _interopRequireDefault(require("./internal/hooks/use-calendar-ref"));
var _useControlledDateState = _interopRequireDefault(require("./internal/hooks/use-controlled-date-state"));
var _useFocusing2 = _interopRequireDefault(require("./internal/hooks/use-focusing"));
var _useGetWeeks = _interopRequireDefault(require("./internal/hooks/use-get-weeks"));
var _useHandleDateChange2 = _interopRequireDefault(require("./internal/hooks/use-handle-date-change"));
var _useHandleDateSelect2 = _interopRequireDefault(require("./internal/hooks/use-handle-date-select"));
var _useLocale2 = _interopRequireDefault(require("./internal/hooks/use-locale"));
var _useUniqueId = _interopRequireDefault(require("./internal/hooks/use-unique-id"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * @jsxRuntime classic
 */ /** @jsx jsx */ // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var boxStyles = (0, _primitives.xcss)({
  display: 'inline-block',
  userSelect: 'none'
});
var analyticsAttributes = {
  componentName: 'calendar',
  packageName: "@atlaskit/calendar",
  packageVersion: "14.3.3"
};
var InnerCalendar = /*#__PURE__*/(0, _react.forwardRef)(function Calendar(_ref, ref) {
  var day = _ref.day,
    _ref$defaultDay = _ref.defaultDay,
    defaultDay = _ref$defaultDay === void 0 ? 0 : _ref$defaultDay,
    _ref$defaultMonth = _ref.defaultMonth,
    defaultMonth = _ref$defaultMonth === void 0 ? 0 : _ref$defaultMonth,
    _ref$defaultPreviousl = _ref.defaultPreviouslySelected,
    defaultPreviouslySelected = _ref$defaultPreviousl === void 0 ? _constants.blankStringArray : _ref$defaultPreviousl,
    _ref$defaultSelected = _ref.defaultSelected,
    defaultSelected = _ref$defaultSelected === void 0 ? _constants.blankStringArray : _ref$defaultSelected,
    _ref$defaultYear = _ref.defaultYear,
    defaultYear = _ref$defaultYear === void 0 ? 0 : _ref$defaultYear,
    disabled = _ref.disabled,
    disabledDateFilter = _ref.disabledDateFilter,
    minDate = _ref.minDate,
    maxDate = _ref.maxDate,
    month = _ref.month,
    nextMonthLabel = _ref.nextMonthLabel,
    _ref$onBlur = _ref.onBlur,
    onBlur = _ref$onBlur === void 0 ? _noop.default : _ref$onBlur,
    _ref$onChange = _ref.onChange,
    onChange = _ref$onChange === void 0 ? _noop.default : _ref$onChange,
    _ref$onFocus = _ref.onFocus,
    onFocus = _ref$onFocus === void 0 ? _noop.default : _ref$onFocus,
    _ref$onSelect = _ref.onSelect,
    onSelect = _ref$onSelect === void 0 ? _noop.default : _ref$onSelect,
    previouslySelected = _ref.previouslySelected,
    previousMonthLabel = _ref.previousMonthLabel,
    selected = _ref.selected,
    today = _ref.today,
    _ref$locale = _ref.locale,
    locale = _ref$locale === void 0 ? 'en-US' : _ref$locale,
    year = _ref.year,
    analyticsContext = _ref.analyticsContext,
    _ref$weekStartDay = _ref.weekStartDay,
    weekStartDay = _ref$weekStartDay === void 0 ? 0 : _ref$weekStartDay,
    testId = _ref.testId,
    calendarRef = _ref.calendarRef,
    className = _ref.className,
    style = _ref.style,
    _ref$tabIndex = _ref.tabIndex,
    tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex;
  var _useControlledDateSta = (0, _useControlledDateState.default)({
      day: day,
      defaultDay: defaultDay,
      month: month,
      defaultMonth: defaultMonth,
      year: year,
      defaultYear: defaultYear,
      today: today,
      selected: selected,
      defaultSelected: defaultSelected,
      previouslySelected: previouslySelected,
      defaultPreviouslySelected: defaultPreviouslySelected
    }),
    _useControlledDateSta2 = (0, _slicedToArray2.default)(_useControlledDateSta.day, 2),
    dayValue = _useControlledDateSta2[0],
    setDayValue = _useControlledDateSta2[1],
    _useControlledDateSta3 = (0, _slicedToArray2.default)(_useControlledDateSta.month, 2),
    monthValue = _useControlledDateSta3[0],
    setMonthValue = _useControlledDateSta3[1],
    _useControlledDateSta4 = (0, _slicedToArray2.default)(_useControlledDateSta.year, 2),
    yearValue = _useControlledDateSta4[0],
    setYearValue = _useControlledDateSta4[1],
    _useControlledDateSta5 = (0, _slicedToArray2.default)(_useControlledDateSta.today, 1),
    todayValue = _useControlledDateSta5[0],
    _useControlledDateSta6 = (0, _slicedToArray2.default)(_useControlledDateSta.selected, 2),
    selectedValue = _useControlledDateSta6[0],
    setSelectedValue = _useControlledDateSta6[1],
    _useControlledDateSta7 = (0, _slicedToArray2.default)(_useControlledDateSta.previous, 2),
    previouslySelectedValue = _useControlledDateSta7[0],
    setPreviouslySelectedValue = _useControlledDateSta7[1];
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    shouldSetFocus = _useState2[0],
    setShouldSetFocus = _useState2[1];
  var onChangeWithAnalytics = (0, _usePlatformLeafEventHandler.usePlatformLeafEventHandler)(_objectSpread({
    fn: onChange,
    action: 'changed',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var _useHandleDateChange = (0, _useHandleDateChange2.default)({
      day: [dayValue, setDayValue],
      month: [monthValue, setMonthValue],
      year: [yearValue, setYearValue],
      shouldSetFocus: [shouldSetFocus, setShouldSetFocus],
      onChange: onChangeWithAnalytics
    }),
    navigate = _useHandleDateChange.navigate,
    handleClickNext = _useHandleDateChange.handleClickNext,
    handleClickPrev = _useHandleDateChange.handleClickPrev;
  var onSelectWithAnalytics = (0, _usePlatformLeafEventHandler.usePlatformLeafEventHandler)(_objectSpread({
    fn: onSelect,
    action: 'selected',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var _useHandleDateSelect = (0, _useHandleDateSelect2.default)({
      day: [dayValue, setDayValue],
      month: [monthValue, setMonthValue],
      year: [yearValue, setYearValue],
      selected: [selectedValue, setSelectedValue],
      previous: [, setPreviouslySelectedValue],
      onSelect: onSelectWithAnalytics,
      navigate: navigate
    }),
    handleClickDay = _useHandleDateSelect.handleClickDay,
    handleContainerKeyDown = _useHandleDateSelect.handleContainerKeyDown;
  var _useFocusing = (0, _useFocusing2.default)({
      onFocus: onFocus,
      onBlur: onBlur
    }),
    handleContainerBlur = _useFocusing.handleContainerBlur,
    handleContainerFocus = _useFocusing.handleContainerFocus;
  (0, _useCalendarRef.default)(calendarRef, {
    navigate: navigate
  });
  var _useLocale = (0, _useLocale2.default)({
      locale: locale,
      weekStartDay: weekStartDay
    }),
    monthsLong = _useLocale.monthsLong,
    daysShort = _useLocale.daysShort,
    daysLong = _useLocale.daysLong;
  var weeks = (0, _useGetWeeks.default)({
    day: dayValue,
    month: monthValue,
    year: yearValue,
    today: todayValue,
    selected: selectedValue,
    previouslySelected: previouslySelectedValue,
    disabled: disabled,
    disabledDateFilter: disabledDateFilter,
    minDate: minDate,
    maxDate: maxDate,
    daysLong: daysLong,
    weekStartDay: weekStartDay
  });
  var getNextHeading = function getNextHeading() {
    // Next month is (currentMonth - 1) + 1, or just currentMonth in this
    // instance.
    var nextMonth = monthValue % 12;
    var showNextYear = monthValue === 12;
    return "".concat(monthsLong[nextMonth], " ").concat(showNextYear ? yearValue + 1 : yearValue);
  };
  var getPreviousHeading = function getPreviousHeading() {
    // Previous month is (monthValue - 1) - 1. Need to add 12 so the modulo
    // works as expected and stays positive.
    var previousMonth = (monthValue + 12 - 2) % 12;
    var showPreviousYear = monthValue === 1;
    return "".concat(monthsLong[previousMonth], " ").concat(showPreviousYear ? yearValue - 1 : yearValue);
  };
  var headerId = (0, _useUniqueId.default)('month-year-header');
  return (0, _react2.jsx)("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: className
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: style,
    onBlur: handleContainerBlur,
    onFocus: handleContainerFocus,
    "data-testid": testId && "".concat(testId, "--container"),
    ref: ref
  }, (0, _react2.jsx)(_primitives.Box, {
    xcss: boxStyles,
    padding: "space.200",
    "aria-label": "calendar",
    testId: testId && "".concat(testId, "--calendar")
  }, (0, _react2.jsx)(_primitives.Stack, {
    space: "space.150"
  }, (0, _react2.jsx)(_header.default
  // The month number needs to be translated to index in the month
  // name array e.g. 1 (January) -> 0
  , {
    monthLongTitle: monthsLong[monthValue - 1],
    year: yearValue,
    nextMonthLabel: nextMonthLabel,
    previousMonthLabel: previousMonthLabel,
    nextHeading: getNextHeading(),
    previousHeading: getPreviousHeading(),
    handleClickNext: handleClickNext,
    handleClickPrev: handleClickPrev,
    headerId: headerId,
    tabIndex: tabIndex,
    testId: testId
  }), (0, _react2.jsx)(_primitives.Box, {
    role: "grid",
    onKeyDown: handleContainerKeyDown,
    "aria-labelledby": headerId,
    testId: testId && "".concat(testId, "--calendar-dates")
  }, (0, _react2.jsx)(_weekHeader.default, {
    daysShort: daysShort,
    testId: testId
  }), (0, _react2.jsx)(_weekDays.default, {
    weeks: weeks,
    handleClickDay: handleClickDay,
    monthsLong: monthsLong,
    shouldSetFocus: shouldSetFocus,
    tabIndex: tabIndex,
    testId: testId
  })))));
});

/**
 * __Calendar__
 *
 * A calendar is used for date selection.
 *
 * - [Examples](https://atlassian.design/components/calendar/examples)
 * - [Code](https://atlassian.design/components/calendar/code)
 * - [Usage](https://atlassian.design/components/calendar/usage)
 */
var Calendar = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function Calendar(props, ref) {
  return (0, _react2.jsx)(InnerCalendar, (0, _extends2.default)({}, props, {
    ref: ref
  }));
}));
Calendar.displayName = 'Calendar';
var _default = exports.default = Calendar;