"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _new = require("@atlaskit/button/new");
var _heading = _interopRequireDefault(require("@atlaskit/heading"));
var _chevronLeftLarge = _interopRequireDefault(require("@atlaskit/icon/glyph/chevron-left-large"));
var _chevronRightLarge = _interopRequireDefault(require("@atlaskit/icon/glyph/chevron-right-large"));
var _primitives = require("@atlaskit/primitives");
var _useUniqueId = _interopRequireDefault(require("../../internal/hooks/use-unique-id"));
/**
 * @jsxRuntime classic
 */
/** @jsx jsx */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var Header = /*#__PURE__*/(0, _react.memo)(function Header(_ref) {
  var monthLongTitle = _ref.monthLongTitle,
    year = _ref.year,
    _ref$previousMonthLab = _ref.previousMonthLabel,
    previousMonthLabel = _ref$previousMonthLab === void 0 ? 'Previous month' : _ref$previousMonthLab,
    previousHeading = _ref.previousHeading,
    _ref$nextMonthLabel = _ref.nextMonthLabel,
    nextMonthLabel = _ref$nextMonthLabel === void 0 ? 'Next month' : _ref$nextMonthLabel,
    nextHeading = _ref.nextHeading,
    handleClickPrev = _ref.handleClickPrev,
    handleClickNext = _ref.handleClickNext,
    headerId = _ref.headerId,
    tabIndex = _ref.tabIndex,
    testId = _ref.testId;
  var announceId = (0, _useUniqueId.default)('month-year-announce');

  // All of this is because `aria-atomic` is not fully supported for different
  // assistive technologies. We want the value of the current month and year to
  // be announced, but *only* if that value has been interacted with since
  // being mounted. This allows us to conditionally apply the `aria-live`
  // attribute.  Without this, the `aria-live` property is set on mount and
  // overrides the default input's readout in downstream consumers (e.g.
  // datetime picker).
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    hasInteractedWithMonth = _useState2[0],
    setHasInteractedWithMonth = _useState2[1];
  var handlePrevMonthInteraction = function handlePrevMonthInteraction(e) {
    if (!hasInteractedWithMonth) {
      setHasInteractedWithMonth(true);
    }
    handleClickPrev(e);
  };
  var handleNextMonthInteraction = function handleNextMonthInteraction(e) {
    if (!hasInteractedWithMonth) {
      setHasInteractedWithMonth(true);
    }
    handleClickNext(e);
  };
  return (0, _react2.jsx)(_primitives.Box, {
    paddingInline: "space.100"
  }, (0, _react2.jsx)(_primitives.Inline, {
    space: "space.0",
    alignBlock: "center",
    spread: "space-between"
  }, (0, _react2.jsx)(_new.IconButton, {
    appearance: "subtle",
    spacing: "compact",
    tabIndex: tabIndex,
    onClick: handlePrevMonthInteraction,
    testId: testId && "".concat(testId, "--previous-month"),
    icon: _chevronLeftLarge.default,
    label: "".concat(previousMonthLabel, ", ").concat(previousHeading)
  }), (0, _react2.jsx)(_primitives.Box, {
    "aria-live": hasInteractedWithMonth ? 'polite' : undefined,
    id: announceId,
    testId: testId && "".concat(testId, "--current-month-year--container")
  }, (0, _react2.jsx)(_heading.default, {
    size: "xsmall",
    as: "h2",
    id: headerId,
    testId: testId && "".concat(testId, "--current-month-year")
  }, "".concat(monthLongTitle, " ").concat(year))), (0, _react2.jsx)(_new.IconButton, {
    appearance: "subtle",
    spacing: "compact",
    tabIndex: tabIndex,
    onClick: handleNextMonthInteraction,
    testId: testId && "".concat(testId, "--next-month"),
    icon: _chevronRightLarge.default,
    label: "".concat(nextMonthLabel, ", ").concat(nextHeading)
  })));
});
Header.displayName = 'Header';

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var _default = exports.default = Header;