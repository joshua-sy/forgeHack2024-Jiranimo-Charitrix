"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("@emotion/react");
var _error = _interopRequireDefault(require("@atlaskit/icon/glyph/error"));
var _warning = _interopRequireDefault(require("@atlaskit/icon/glyph/warning"));
var _hooks = require("./hooks");
var _constants = require("./internal/constants");
/**
 * @jsxRuntime classic
 */
/** @jsx jsx */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

var titleStyles = (0, _react.css)({
  display: 'flex',
  minWidth: 0,
  margin: "var(--ds-space-0, 0px)",
  gap: "var(--ds-space-100, 8px)",
  font: "var(--ds-font-heading-medium, normal 500 20px/24px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
});
var textStyles = (0, _react.css)({
  minWidth: 0,
  /**
   * This ensures that the element fills the whole header space
   * and its content does not overflow (since flex items don't
   * shrink past its content size by default).
   */
  flex: '1 1 auto',
  wordWrap: 'break-word'
});
var iconStyles = (0, _react.css)({
  flex: '0 0 auto',
  // The following properties have been added purely to avoid a global style override in Jira breaking alignment between the icon and title text.
  // https://stash.atlassian.com/projects/JIRACLOUD/repos/jira/browse/jira-components/jira-legacy-frontend/jira-atlaskit-module/src/main/resources/jira-atlaskit-module/css/adg3-general-overrides.less?at=master#24
  // When the override is removed, these can be removed.
  color: 'inherit',
  fontSize: 'inherit',
  fontStyle: 'inherit',
  fontWeight: 'inherit',
  letterSpacing: 'inherit',
  lineHeight: 'inherit'
});
var truncatedTextStyles = (0, _react.css)({
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});
var TitleIcon = function TitleIcon(_ref) {
  var appearance = _ref.appearance;
  var Icon = appearance === 'danger' ? _error.default : _warning.default;
  return (0, _react.jsx)("span", {
    css: iconStyles
  }, (0, _react.jsx)(Icon, {
    label: appearance,
    primaryColor: _constants.iconColor[appearance]
  }));
};
/**
 * __Modal title__
 *
 * A modal title is used to display a title within a modal.
 *
 * - [Examples](https://atlassian.design/components/modal-dialog/examples)
 * - [Code](https://atlassian.design/components/modal-dialog/code)
 * - [Usage](https://atlassian.design/components/modal-dialog/usage)
 */
var ModalTitle = function ModalTitle(props) {
  var appearance = props.appearance,
    children = props.children,
    _props$isMultiline = props.isMultiline,
    isMultiline = _props$isMultiline === void 0 ? true : _props$isMultiline,
    userDefinedTestId = props.testId;
  var _useModal = (0, _hooks.useModal)(),
    titleId = _useModal.titleId,
    modalTestId = _useModal.testId;
  var testId = userDefinedTestId || modalTestId && "".concat(modalTestId, "--title");
  return (0, _react.jsx)("h1", {
    css: titleStyles,
    "data-testid": testId
  }, appearance && (0, _react.jsx)(TitleIcon, {
    appearance: appearance
  }), (0, _react.jsx)("span", {
    id: titleId,
    css: [textStyles, !isMultiline && truncatedTextStyles],
    "data-testid": testId && "".concat(testId, "-text")
  }, children));
};
var _default = exports.default = ModalTitle;