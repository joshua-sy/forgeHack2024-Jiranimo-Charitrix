/**
 * @jsxRuntime classic
 */
/** @jsx jsx */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { buttonWidthUnitless, cssVar, defaultTextPadding, maxTextWidth, maxTextWidthUnitless, textMarginLeft, textPaddingRight } from '../../../constants';
var baseStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  maxWidth: maxTextWidth,
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  overflow: 'hidden',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  paddingInlineEnd: defaultTextPadding,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  paddingInlineStart: defaultTextPadding,
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});
var linkStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  color: "var(".concat(cssVar.color.text.link, ")"),
  pointerEvents: 'auto',
  textDecoration: 'none',
  '&:hover': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    color: "var(".concat(cssVar.color.text.hover, ")"),
    textDecoration: 'underline'
  },
  '&:active': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    color: "var(".concat(cssVar.color.text.active, ")"),
    textDecoration: 'underline'
  },
  '&:focus': {
    outline: 'none'
  }
});
var hasAfterStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  maxWidth: "".concat(maxTextWidthUnitless - buttonWidthUnitless, "px"),
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  paddingInlineEnd: textPaddingRight
});
var hasBeforeStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @atlaskit/ui-styling-standard/no-imported-style-values, @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  marginInlineStart: textMarginLeft
});
var Content = function Content(_ref) {
  var _ref$elemBefore = _ref.elemBefore,
    elemBefore = _ref$elemBefore === void 0 ? null : _ref$elemBefore,
    _ref$isRemovable = _ref.isRemovable,
    isRemovable = _ref$isRemovable === void 0 ? true : _ref$isRemovable,
    _ref$text = _ref.text,
    text = _ref$text === void 0 ? '' : _ref$text,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'standard' : _ref$color,
    href = _ref.href,
    linkComponent = _ref.linkComponent;
  var Link = linkComponent !== null && linkComponent !== void 0 ? linkComponent : 'a';
  if (href) {
    return jsx(Link, {
      href: href,
      "data-color": color,
      css: [baseStyles, linkStyles, elemBefore && hasBeforeStyles, isRemovable && hasAfterStyles]
    }, text);
  } else {
    return jsx("span", {
      css: [baseStyles, elemBefore && hasBeforeStyles, isRemovable && hasAfterStyles]
    }, text);
  }
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default Content;