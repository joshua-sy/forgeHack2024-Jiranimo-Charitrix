/**
 * @jsxRuntime classic
 */
/** @jsx jsx */
import { forwardRef, memo, useCallback, useState } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { useCallbackWithAnalytics } from '@atlaskit/analytics-next';
import mergeRefs from '@atlaskit/ds-lib/merge-refs';
import noop from '@atlaskit/ds-lib/noop';
import { ExitingPersistence, ShrinkOut } from '@atlaskit/motion';
import { cssVar } from '../../../constants';
import * as styles from '../../../styles';
import BaseTag from '../shared/base';
import Before from '../shared/before';
import Content from '../shared/content';
import RemoveButton from './remove-button';
var TagStatus = /*#__PURE__*/function (TagStatus) {
  TagStatus["Showing"] = "showing";
  TagStatus["Removing"] = "removing";
  TagStatus["Removed"] = "removed";
  return TagStatus;
}(TagStatus || {});
const packageName = "@atlaskit/tag";
const packageVersion = "12.3.2";
const defaultBeforeRemoveAction = () => true;

/**
 * These hide the focus ring for the tag when its remove button is focused,
 * preventing a double focus ring.
 */
const removingStyles = css({
  '&:focus-within': {
    boxShadow: `0 0 0 2px transparent`,
    outline: 'none'
  }
});
const RemovableTag = /*#__PURE__*/forwardRef(({
  appearance,
  elemBefore = null,
  isRemovable = true,
  text = '',
  color = 'standard',
  href,
  removeButtonLabel,
  testId,
  onBeforeRemoveAction = defaultBeforeRemoveAction,
  onAfterRemoveAction = noop,
  linkComponent
}, ref) => {
  const [status, setStatus] = useState(TagStatus.Showing);
  const [isHoverCloseButton, setIsHoverCloseButton] = useState(false);
  const onAfterRemoveActionWithAnalytics = useCallbackWithAnalytics(onAfterRemoveAction, {
    action: 'removed',
    actionSubject: 'tag',
    attributes: {
      componentName: 'tag',
      packageName,
      packageVersion
    }
  }, 'atlaskit');
  const handleRemoveComplete = useCallback(() => {
    onAfterRemoveActionWithAnalytics(text);
    setStatus(TagStatus.Removed);
  }, [onAfterRemoveActionWithAnalytics, text]);
  const handleRemoveRequest = useCallback(() => {
    if (onBeforeRemoveAction && onBeforeRemoveAction()) {
      handleRemoveComplete();
    }
  }, [handleRemoveComplete, onBeforeRemoveAction]);
  const onKeyPress = useCallback(e => {
    const spacebarOrEnter = e.key === ' ' || e.key === 'Enter';
    if (spacebarOrEnter) {
      e.stopPropagation();
      handleRemoveRequest();
    }
  }, [handleRemoveRequest]);
  const removingTag = useCallback(() => setStatus(TagStatus.Removing), []);
  const showingTag = useCallback(() => setStatus(TagStatus.Showing), []);
  const handleMouseOver = useCallback(() => setIsHoverCloseButton(true), []);
  const handleMouseOut = useCallback(() => setIsHoverCloseButton(false), []);
  const removeButton = isRemovable ? jsx(RemoveButton, {
    "aria-label": `${removeButtonLabel} ${text}`,
    onClick: handleRemoveRequest,
    onFocus: removingTag,
    onBlur: showingTag,
    onKeyPress: onKeyPress,
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut,
    testId: `close-button-${testId}`
  }) : undefined;
  const content = jsx(Content, {
    elemBefore: elemBefore,
    isRemovable: isRemovable,
    text: text,
    color: color,
    href: href,
    linkComponent: linkComponent
  });
  const hoverCloseButtonColors = {
    // Tag background color on hover
    [cssVar.color.background.hover]: styles.removalHoverBackgroundColors,
    // Tag background color on press
    [cssVar.color.background.active]: styles.removalActiveBackgroundColors,
    // The tag text on hover of remove button
    [cssVar.color.text.default]: styles.removalTextColors,
    // 'elemBefore' text on press of remove button
    [cssVar.color.text.active]: styles.removalTextColors,
    // The tag link text on hover of remove button
    [cssVar.color.text.link]: styles.removalTextColors
  };
  return jsx(ExitingPersistence, null, !(status === TagStatus.Removed) && jsx(ShrinkOut, null, motion => {
    return jsx(BaseTag, {
      ref: mergeRefs([motion.ref, ref]),
      appearance: appearance,
      color: color,
      testId: testId,
      css: [status === TagStatus.Removing && removingStyles]
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      ,
      style: isHoverCloseButton ? hoverCloseButtonColors : undefined,
      "data-removable": true,
      "data-removing": status === TagStatus.Removing,
      "data-ishoverclosebutton": isHoverCloseButton,
      href: href,
      before: jsx(Before, {
        elemBefore: elemBefore
      }),
      contentElement: content,
      after: removeButton
    });
  }));
});
export default /*#__PURE__*/memo(RemovableTag);