"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Icon = void 0;
var _react = require("react");
var _react2 = require("@emotion/react");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
/**
 * @jsxRuntime classic
 */
/** @jsx jsx */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766

/**
 * We are hiding this props from consumers as it's reserved
 * for use by Icon Tile.
 */

var commonSVGStyles = (0, _react2.css)({
  overflow: 'hidden',
  pointerEvents: 'none',
  /**
   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.
   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS
   * rule) and then override it with currentColor for the color changes to be picked up.
   */
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  stop: {
    stopColor: 'currentColor'
  }
});
var svgStyles = (0, _react2.css)({
  color: 'currentColor',
  verticalAlign: 'bottom'
});
var iconStyles = (0, _react2.css)({
  display: 'inline-block',
  boxSizing: 'border-box',
  flexShrink: 0,
  lineHeight: 1,
  paddingInlineEnd: 'var(--ds--button--new-icon-padding-end, 0)',
  paddingInlineStart: 'var(--ds--button--new-icon-padding-start, 0)'
});
var utilityIconStyles = (0, _react2.css)({
  lineHeight: "var(--ds-space-150, 12px)"
});
var scaleStyles = (0, _react2.css)({
  width: 'inherit',
  height: 'inherit'
});

/**
 * For windows high contrast mode
 */
var baseHcmStyles = (0, _react2.css)({
  '@media screen and (forced-colors: active)': {
    color: 'CanvasText',
    filter: 'grayscale(1)'
  }
});
var sizeMap = {
  scale: (0, _react2.css)({
    width: 'inherit',
    height: 'inherit'
  }),
  utility: (0, _react2.css)({
    width: "var(--ds-space-150, 12px)",
    height: "var(--ds-space-150, 12px)"
  }),
  none: (0, _react2.css)({
    width: "var(--ds-space-200, 16px)",
    height: "var(--ds-space-200, 16px)"
  }),
  spacious: (0, _react2.css)({
    width: "var(--ds-space-300, 24px)",
    height: "var(--ds-space-300, 24px)"
  })
};
var baseSizeMap = {
  global: 16,
  utility: 12
};

/**
 * __Icon__
 *
 * An icon is used as a visual representation of common actions and commands to provide context.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */
var Icon = exports.Icon = /*#__PURE__*/(0, _react.memo)(function Icon(props) {
  var _ref = props,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? "var(--ds-icon, #44546F)" : _ref$color,
    _ref$spacing = _ref.spacing,
    providedSpacing = _ref$spacing === void 0 ? 'none' : _ref$spacing,
    testId = _ref.testId,
    label = _ref.label,
    LEGACY_secondaryColor = _ref.LEGACY_secondaryColor,
    LEGACY_size = _ref.LEGACY_size,
    FallbackIcon = _ref.LEGACY_fallbackIcon,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'global' : _ref$type,
    dangerouslySetGlyph = _ref.dangerouslySetGlyph,
    shouldScale = _ref.shouldScale;
  var dangerouslySetInnerHTML = dangerouslySetGlyph ? {
    __html: dangerouslySetGlyph
  } : undefined;

  // Fall back to old icon
  if (FallbackIcon && !(0, _platformFeatureFlags.getBooleanFF)('platform.design-system-team.enable-new-icons')) {
    // parse out unnecessary props
    return (0, _react2.jsx)(FallbackIcon, {
      primaryColor: color,
      secondaryColor: LEGACY_secondaryColor,
      size: LEGACY_size,
      label: label,
      testId: testId
    });
  }

  // Utility icons don't have 'spacing' as a type, but in case it's provided, we default to 'none'
  var spacing = type === 'utility' ? 'none' : providedSpacing;
  var baseSize = baseSizeMap[type];
  var size = type === 'utility' ? 'utility' : shouldScale ? 'scale' : spacing;
  var viewBoxPadding = spacing === 'spacious' ? 4 : 0;
  var viewBoxSize = baseSize + 2 * viewBoxPadding;

  // Workaround for the transparency in our disabled icon token.
  // Because we have multiple strokes in icons, opacities overlap
  // This filter has an impact on render performance, but this is
  // acceptable as icons aren't commonly disabled en-masse
  var iconColor = color;
  if (dangerouslySetInnerHTML && color === "var(--ds-icon-disabled, #091E424F)") {
    dangerouslySetInnerHTML.__html = "\n<filter id=\"ds-newIconOpacityFilter\">\n  <feFlood flood-color=\"var(--ds-icon-disabled)\" />\n  <feComposite in2=\"SourceGraphic\" operator=\"in\" />\n</filter>\n<g filter=\"url(#ds-newIconOpacityFilter)\">\n  ".concat(dangerouslySetInnerHTML.__html, "\n</g>");
    iconColor = "var(--ds-icon, #44546F)";
  }
  return (0, _react2.jsx)("span", {
    "data-testid": testId,
    role: label ? 'img' : undefined,
    "aria-label": label ? label : undefined,
    "aria-hidden": label ? undefined : true,
    style: {
      color: iconColor
    },
    css: [iconStyles, baseHcmStyles, shouldScale && scaleStyles, type === 'utility' && utilityIconStyles]
  }, (0, _react2.jsx)("svg", {
    fill: "none"
    // Adjusting the viewBox allows the icon padding to scale with the contents of the SVG, which
    // we want for Icon Tile
    ,
    viewBox: "".concat(0 - viewBoxPadding, " ").concat(0 - viewBoxPadding, " ").concat(viewBoxSize, " ").concat(viewBoxSize),
    role: "presentation",
    css: [commonSVGStyles, svgStyles, sizeMap[size]],
    dangerouslySetInnerHTML: dangerouslySetInnerHTML
  }));
});
var _default = exports.default = Icon;