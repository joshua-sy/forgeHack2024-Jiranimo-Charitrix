/**
 * @jsxRuntime classic
 */
/** @jsx jsx */
import { forwardRef, memo, useCallback, useRef } from 'react';
import { css, jsx } from '@emotion/react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next/usePlatformLeafEventHandler';
import noop from '@atlaskit/ds-lib/noop';
import { N100A } from '@atlaskit/theme/colors';
import { layers } from '@atlaskit/theme/constants';
const packageName = "@atlaskit/blanket";
const packageVersion = "13.2.0";
const analyticsAttributes = {
  componentName: 'blanket',
  packageName,
  packageVersion
};
const baseStyles = css({
  position: 'fixed',
  zIndex: layers.blanket(),
  inset: 0,
  backgroundColor: `var(--ds-blanket, ${N100A})`,
  overflowY: 'auto',
  pointerEvents: 'initial'
});
const shouldAllowClickThroughStyles = css({
  pointerEvents: 'none'
});
const invisibleStyles = css({
  backgroundColor: 'transparent'
});

/**
 * __Blanket__
 *
 * A Blanket provides the overlay layer for components such as a modal dialog or a tooltip
 *
 * - [Examples](https://atlaskit.atlassian.com/examples/design-system/blanket/basic-usage)
 */
const Blanket = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Blanket({
  shouldAllowClickThrough = false,
  isTinted = false,
  onBlanketClicked = noop,
  testId,
  children,
  analyticsContext
}, ref) {
  const mouseDownTarget = useRef(null);
  const onBlanketClickedWithAnalytics = usePlatformLeafEventHandler({
    fn: onBlanketClicked,
    action: 'clicked',
    analyticsData: analyticsContext,
    ...analyticsAttributes
  });
  const blanketClickOutsideChildren = useCallback(e => e.currentTarget === e.target && mouseDownTarget.current === e.target ? onBlanketClickedWithAnalytics(e) : undefined, [onBlanketClickedWithAnalytics]);
  const onClick = shouldAllowClickThrough ? undefined : blanketClickOutsideChildren;
  const onMouseDown = useCallback(e => {
    mouseDownTarget.current = e.target;
  }, []);
  return (
    /**
     * It is not normally acceptable to add click and key handlers to non-interactive
     * elements as this is an accessibility anti-pattern. However, because this
     * instance is to enable light dismiss functionality instead of creating an
     * inaccessible custom element, we can add role="presentation" so that there
     * are no negative impacts to assistive technologies.
     */
    jsx("div", {
      role: "presentation",
      css: [baseStyles, shouldAllowClickThrough && shouldAllowClickThroughStyles, !isTinted && invisibleStyles],
      onClick: onClick,
      onMouseDown: onMouseDown,
      "data-testid": testId,
      ref: ref
    }, children)
  );
}));
Blanket.displayName = 'Blanket';
export default Blanket;