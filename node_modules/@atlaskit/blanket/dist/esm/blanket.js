import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * @jsxRuntime classic
 */
/** @jsx jsx */
import { forwardRef, memo, useCallback, useRef } from 'react';
import { css, jsx } from '@emotion/react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next/usePlatformLeafEventHandler';
import noop from '@atlaskit/ds-lib/noop';
import { N100A } from '@atlaskit/theme/colors';
import { layers } from '@atlaskit/theme/constants';
var packageName = "@atlaskit/blanket";
var packageVersion = "13.2.0";
var analyticsAttributes = {
  componentName: 'blanket',
  packageName: packageName,
  packageVersion: packageVersion
};
var baseStyles = css({
  position: 'fixed',
  zIndex: layers.blanket(),
  inset: 0,
  backgroundColor: "var(--ds-blanket, ".concat(N100A, ")"),
  overflowY: 'auto',
  pointerEvents: 'initial'
});
var shouldAllowClickThroughStyles = css({
  pointerEvents: 'none'
});
var invisibleStyles = css({
  backgroundColor: 'transparent'
});

/**
 * __Blanket__
 *
 * A Blanket provides the overlay layer for components such as a modal dialog or a tooltip
 *
 * - [Examples](https://atlaskit.atlassian.com/examples/design-system/blanket/basic-usage)
 */
var Blanket = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Blanket(_ref, ref) {
  var _ref$shouldAllowClick = _ref.shouldAllowClickThrough,
    shouldAllowClickThrough = _ref$shouldAllowClick === void 0 ? false : _ref$shouldAllowClick,
    _ref$isTinted = _ref.isTinted,
    isTinted = _ref$isTinted === void 0 ? false : _ref$isTinted,
    _ref$onBlanketClicked = _ref.onBlanketClicked,
    onBlanketClicked = _ref$onBlanketClicked === void 0 ? noop : _ref$onBlanketClicked,
    testId = _ref.testId,
    children = _ref.children,
    analyticsContext = _ref.analyticsContext;
  var mouseDownTarget = useRef(null);
  var onBlanketClickedWithAnalytics = usePlatformLeafEventHandler(_objectSpread({
    fn: onBlanketClicked,
    action: 'clicked',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var blanketClickOutsideChildren = useCallback(function (e) {
    return e.currentTarget === e.target && mouseDownTarget.current === e.target ? onBlanketClickedWithAnalytics(e) : undefined;
  }, [onBlanketClickedWithAnalytics]);
  var onClick = shouldAllowClickThrough ? undefined : blanketClickOutsideChildren;
  var onMouseDown = useCallback(function (e) {
    mouseDownTarget.current = e.target;
  }, []);
  return (
    /**
     * It is not normally acceptable to add click and key handlers to non-interactive
     * elements as this is an accessibility anti-pattern. However, because this
     * instance is to enable light dismiss functionality instead of creating an
     * inaccessible custom element, we can add role="presentation" so that there
     * are no negative impacts to assistive technologies.
     */
    jsx("div", {
      role: "presentation",
      css: [baseStyles, shouldAllowClickThrough && shouldAllowClickThroughStyles, !isTinted && invisibleStyles],
      onClick: onClick,
      onMouseDown: onMouseDown,
      "data-testid": testId,
      ref: ref
    }, children)
  );
}));
Blanket.displayName = 'Blanket';
export default Blanket;