import React, { forwardRef, memo } from 'react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import noop from '@atlaskit/ds-lib/noop';
import useControlled from '@atlaskit/ds-lib/use-controlled';
import ChevronLeftLargeIcon from '@atlaskit/icon/glyph/chevron-left-large';
import ChevronRightLargeIcon from '@atlaskit/icon/glyph/chevron-right-large';
import { Box, Inline, xcss } from '@atlaskit/primitives';
import Navigator from './internal/components/navigator';
import PageComponent from './internal/components/page';
import renderDefaultEllipsis from './internal/components/render-ellipsis';
import { emptyObject } from './internal/constants';
import collapseRange from './internal/utils/collapse-range';
const analyticsAttributes = {
  componentName: 'pagination',
  packageName: "@atlaskit/pagination",
  packageVersion: "14.7.5"
};
const paginationMenuStyles = xcss({
  padding: 'space.0',
  margin: 'space.0'
});
const paginationMenuItemStyles = xcss({
  marginBlockStart: 'space.0'
});
function InnerPagination({
  components = emptyObject,
  defaultSelectedIndex = 0,
  selectedIndex,
  label = 'pagination',
  pageLabel = 'page',
  previousLabel = 'previous',
  nextLabel = 'next',
  style = emptyObject,
  max = 7,
  onChange = noop,
  pages,
  getPageLabel,
  renderEllipsis = renderDefaultEllipsis,
  analyticsContext,
  testId,
  isDisabled
}, ref) {
  const [selectedIndexValue, setSelectedIndexValue] = useControlled(selectedIndex, () => defaultSelectedIndex || 0);
  const onChangeWithAnalytics = usePlatformLeafEventHandler({
    fn: (value, analyticsEvent) => {
      const {
        event,
        selectedPageIndex
      } = value;
      if (selectedIndex === undefined) {
        setSelectedIndexValue(selectedPageIndex);
      }
      if (onChange) {
        onChange(event, pages[selectedPageIndex], analyticsEvent);
      }
    },
    action: 'changed',
    actionSubject: 'pageNumber',
    analyticsData: analyticsContext,
    ...analyticsAttributes
  });
  const transform = (page, currPageIndex, testId) => {
    const selectedPage = pages[selectedIndexValue];
    const pageIndexLabel = `${pageLabel} ${getPageLabel ? getPageLabel(page, currPageIndex) : page}`;
    const isCurrentPage = page === selectedPage;
    return /*#__PURE__*/React.createElement(Inline, {
      as: "li",
      xcss: paginationMenuItemStyles,
      key: `page-${getPageLabel ? getPageLabel(page, currPageIndex) : currPageIndex}`
    }, /*#__PURE__*/React.createElement(PageComponent, {
      component: components.Page,
      onClick: event => onChangeWithAnalytics({
        event,
        selectedPageIndex: currPageIndex
      }),
      "aria-current": isCurrentPage ? 'page' : undefined,
      "aria-label": pageIndexLabel,
      isSelected: isCurrentPage,
      isDisabled: isDisabled,
      page: page,
      testId: testId && `${testId}--${isCurrentPage ? 'current-' : ''}page-${currPageIndex}`
    }, getPageLabel ? getPageLabel(page, currPageIndex) : page));
  };
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    React.createElement(Box, {
      testId: testId,
      style: style,
      ref: ref,
      "aria-label": label,
      as: "nav"
    }, /*#__PURE__*/React.createElement(Inline, {
      space: "space.0",
      alignBlock: "center"
    }, /*#__PURE__*/React.createElement(Navigator, {
      key: "left-navigator",
      component: components.Previous,
      onClick: event => onChangeWithAnalytics({
        event,
        selectedPageIndex: selectedIndexValue - 1
      }),
      isDisabled: isDisabled || selectedIndexValue === 0,
      iconBefore: /*#__PURE__*/React.createElement(ChevronLeftLargeIcon, {
        label: ""
      }),
      "aria-label": previousLabel,
      testId: testId && `${testId}--left-navigator`
    }), /*#__PURE__*/React.createElement(Inline, {
      space: "space.0",
      alignBlock: "baseline",
      as: "ul",
      xcss: paginationMenuStyles
    }, collapseRange(pages, selectedIndexValue, {
      max: max,
      ellipsis: renderEllipsis,
      transform
    }, testId)), /*#__PURE__*/React.createElement(Navigator, {
      key: "right-navigator",
      component: components.Next,
      onClick: event => onChangeWithAnalytics({
        event,
        selectedPageIndex: selectedIndexValue + 1
      }),
      isDisabled: isDisabled || selectedIndexValue === pages.length - 1,
      iconBefore: /*#__PURE__*/React.createElement(ChevronRightLargeIcon, {
        label: ""
      }),
      "aria-label": nextLabel,
      testId: testId && `${testId}--right-navigator`
    })))
  );
}
const Pagination = /*#__PURE__*/forwardRef(InnerPagination);
export default /*#__PURE__*/memo(Pagination);