import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["aria-label", "aria-labelledby", "analyticsContext", "appearance", "autoFocus", "href", "icon", "interactionName", "isDisabled", "isSelected", "isTooltipDisabled", "label", "onClick", "onClickCapture", "onKeyDownCapture", "onKeyUpCapture", "onMouseDownCapture", "onMouseUpCapture", "onPointerDownCapture", "onPointerUpCapture", "onTouchEndCapture", "onTouchStartCapture", "shape", "spacing", "testId", "tooltip", "UNSAFE_size"],
  _excluded2 = ["className", "css", "as", "style"];
import React, { forwardRef, memo } from 'react';
import { getBooleanFF } from '@atlaskit/platform-feature-flags';
import Anchor from '@atlaskit/primitives/anchor';
import Tooltip from '@atlaskit/tooltip';
import useIconButton from './use-icon-button';
var LinkIconButtonBase = function LinkIconButtonBase(_ref, ref) {
  var preventedAriaLabel = _ref['aria-label'],
    ariaLabelledBy = _ref['aria-labelledby'],
    analyticsContext = _ref.analyticsContext,
    appearance = _ref.appearance,
    autoFocus = _ref.autoFocus,
    href = _ref.href,
    icon = _ref.icon,
    interactionName = _ref.interactionName,
    isDisabled = _ref.isDisabled,
    isSelected = _ref.isSelected,
    _ref$isTooltipDisable = _ref.isTooltipDisabled,
    isTooltipDisabled = _ref$isTooltipDisable === void 0 ? true : _ref$isTooltipDisable,
    label = _ref.label,
    onClick = _ref.onClick,
    onClickCapture = _ref.onClickCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    shape = _ref.shape,
    spacing = _ref.spacing,
    testId = _ref.testId,
    tooltip = _ref.tooltip,
    UNSAFE_size = _ref.UNSAFE_size,
    unsafeRest = _objectWithoutProperties(_ref, _excluded);
  // @ts-expect-error
  var _className = unsafeRest.className,
    _css = unsafeRest.css,
    _as = unsafeRest.as,
    _style = unsafeRest.style,
    saferRest = _objectWithoutProperties(unsafeRest, _excluded2);
  var rest = getBooleanFF('platform.design-system-team.remove-unsafe-spread-from-new-button_a2xhw') ? saferRest : unsafeRest;
  var baseProps = useIconButton({
    analyticsContext: analyticsContext,
    appearance: appearance,
    ariaLabelledBy: ariaLabelledBy,
    autoFocus: autoFocus,
    buttonType: 'link',
    icon: icon,
    interactionName: interactionName,
    isDisabled: isDisabled,
    isSelected: isSelected,
    label: label,
    onClick: onClick,
    onClickCapture: onClickCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onTouchEndCapture: onTouchEndCapture,
    onTouchStartCapture: onTouchStartCapture,
    ref: ref,
    shape: shape,
    spacing: spacing,
    testId: testId,
    UNSAFE_size: UNSAFE_size
  });
  if (!isTooltipDisabled) {
    var _tooltip$content;
    return /*#__PURE__*/React.createElement(Tooltip, {
      content: (_tooltip$content = tooltip === null || tooltip === void 0 ? void 0 : tooltip.content) !== null && _tooltip$content !== void 0 ? _tooltip$content : label,
      testId: tooltip === null || tooltip === void 0 ? void 0 : tooltip.testId,
      position: tooltip === null || tooltip === void 0 ? void 0 : tooltip.position,
      delay: tooltip === null || tooltip === void 0 ? void 0 : tooltip.delay,
      onShow: tooltip === null || tooltip === void 0 ? void 0 : tooltip.onShow,
      onHide: tooltip === null || tooltip === void 0 ? void 0 : tooltip.onHide,
      mousePosition: tooltip === null || tooltip === void 0 ? void 0 : tooltip.mousePosition,
      analyticsContext: tooltip === null || tooltip === void 0 ? void 0 : tooltip.analyticsContext,
      strategy: tooltip === null || tooltip === void 0 ? void 0 : tooltip.strategy,
      tag: tooltip === null || tooltip === void 0 ? void 0 : tooltip.tag,
      truncate: tooltip === null || tooltip === void 0 ? void 0 : tooltip.truncate,
      component: tooltip === null || tooltip === void 0 ? void 0 : tooltip.component,
      hideTooltipOnClick: tooltip === null || tooltip === void 0 ? void 0 : tooltip.hideTooltipOnClick,
      hideTooltipOnMouseDown: tooltip === null || tooltip === void 0 ? void 0 : tooltip.hideTooltipOnMouseDown
    }, function (triggerProps) {
      return /*#__PURE__*/React.createElement(Anchor
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
      , _extends({}, rest, {
        "aria-labelledby": baseProps['aria-labelledby'],
        testId: testId,
        componentName: "LinkIconButton",
        analyticsContext: analyticsContext,
        interactionName: interactionName
        // Shared between tooltip and native props
        ,
        onMouseOver: function onMouseOver(e) {
          var _triggerProps$onMouse, _rest$onMouseOver;
          (_triggerProps$onMouse = triggerProps.onMouseOver) === null || _triggerProps$onMouse === void 0 || _triggerProps$onMouse.call(triggerProps, e);
          (_rest$onMouseOver = rest.onMouseOver) === null || _rest$onMouseOver === void 0 || _rest$onMouseOver.call(rest, e);
        },
        onMouseOut: function onMouseOut(e) {
          var _triggerProps$onMouse2, _rest$onMouseOut;
          (_triggerProps$onMouse2 = triggerProps.onMouseOut) === null || _triggerProps$onMouse2 === void 0 || _triggerProps$onMouse2.call(triggerProps, e);
          (_rest$onMouseOut = rest.onMouseOut) === null || _rest$onMouseOut === void 0 || _rest$onMouseOut.call(rest, e);
        },
        onMouseMove: function onMouseMove(e) {
          var _triggerProps$onMouse3, _rest$onMouseMove;
          (_triggerProps$onMouse3 = triggerProps.onMouseMove) === null || _triggerProps$onMouse3 === void 0 || _triggerProps$onMouse3.call(triggerProps, e);
          (_rest$onMouseMove = rest.onMouseMove) === null || _rest$onMouseMove === void 0 || _rest$onMouseMove.call(rest, e);
        },
        onMouseDown: function onMouseDown(e) {
          var _triggerProps$onMouse4, _rest$onMouseDown;
          (_triggerProps$onMouse4 = triggerProps.onMouseDown) === null || _triggerProps$onMouse4 === void 0 || _triggerProps$onMouse4.call(triggerProps, e);
          (_rest$onMouseDown = rest.onMouseDown) === null || _rest$onMouseDown === void 0 || _rest$onMouseDown.call(rest, e);
        },
        onFocus: function onFocus(e) {
          var _triggerProps$onFocus, _rest$onFocus;
          (_triggerProps$onFocus = triggerProps.onFocus) === null || _triggerProps$onFocus === void 0 || _triggerProps$onFocus.call(triggerProps, e);
          (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 || _rest$onFocus.call(rest, e);
        },
        onBlur: function onBlur(e) {
          var _triggerProps$onBlur, _rest$onBlur;
          (_triggerProps$onBlur = triggerProps.onBlur) === null || _triggerProps$onBlur === void 0 || _triggerProps$onBlur.call(triggerProps, e);
          (_rest$onBlur = rest.onBlur) === null || _rest$onBlur === void 0 || _rest$onBlur.call(rest, e);
        }
        // Shared between tooltip and base props
        ,
        onClick: function onClick(event, analyticsEvent) {
          var _baseProps$onClick, _triggerProps$onClick;
          baseProps === null || baseProps === void 0 || (_baseProps$onClick = baseProps.onClick) === null || _baseProps$onClick === void 0 || _baseProps$onClick.call(baseProps, event, analyticsEvent);
          triggerProps === null || triggerProps === void 0 || (_triggerProps$onClick = triggerProps.onClick) === null || _triggerProps$onClick === void 0 || _triggerProps$onClick.call(triggerProps, event);
        },
        ref: function ref(_ref2) {
          var _triggerProps$ref;
          baseProps.ref(_ref2);
          triggerProps === null || triggerProps === void 0 || (_triggerProps$ref = triggerProps.ref) === null || _triggerProps$ref === void 0 || _triggerProps$ref.call(triggerProps, _ref2);
        }
        // Base props only
        ,
        xcss: baseProps.xcss,
        onMouseDownCapture: baseProps.onMouseDownCapture,
        onMouseUpCapture: baseProps.onMouseUpCapture,
        onKeyDownCapture: baseProps.onKeyDownCapture,
        onKeyUpCapture: baseProps.onKeyUpCapture,
        onTouchStartCapture: baseProps.onTouchStartCapture,
        onTouchEndCapture: baseProps.onTouchEndCapture,
        onPointerDownCapture: baseProps.onPointerDownCapture,
        onPointerUpCapture: baseProps.onPointerUpCapture,
        onClickCapture: baseProps.onClickCapture
        /**
         * Disable link in an accessible way using `href`, `role`, and `aria-disabled`.
         * @see https://a11y-guidelines.orange.com/en/articles/disable-elements/#disable-a-link
         */
        // @ts-expect-error (`href` is required, we could make it optional but don't want to encourage this pattern elsewhere)
        ,
        href: baseProps.isDisabled ? undefined : href,
        role: baseProps.isDisabled ? 'link' : undefined,
        "aria-disabled": baseProps.isDisabled === true ? true : undefined
      }), baseProps.children);
    });
  }
  return /*#__PURE__*/React.createElement(Anchor
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  , _extends({}, rest, {
    "aria-labelledby": baseProps['aria-labelledby'],
    ref: baseProps.ref,
    xcss: baseProps.xcss,
    onClick: baseProps.onClick,
    onMouseDownCapture: baseProps.onMouseDownCapture,
    onMouseUpCapture: baseProps.onMouseUpCapture,
    onKeyDownCapture: baseProps.onKeyDownCapture,
    onKeyUpCapture: baseProps.onKeyUpCapture,
    onTouchStartCapture: baseProps.onTouchStartCapture,
    onTouchEndCapture: baseProps.onTouchEndCapture,
    onPointerDownCapture: baseProps.onPointerDownCapture,
    onPointerUpCapture: baseProps.onPointerUpCapture,
    onClickCapture: baseProps.onClickCapture,
    testId: testId
    /**
     * Disable link in an accessible way using `href`, `role`, and `aria-disabled`.
     * @see https://a11y-guidelines.orange.com/en/articles/disable-elements/#disable-a-link
     */
    // @ts-expect-error (`href` is required, we could make it optional but don't want to encourage this pattern elsewhere)
    ,
    href: baseProps.isDisabled ? undefined : href,
    role: baseProps.isDisabled ? 'link' : undefined,
    "aria-disabled": baseProps.isDisabled === true ? true : undefined,
    componentName: "LinkIconButton",
    analyticsContext: analyticsContext,
    interactionName: interactionName
  }), baseProps.children);
};

// Workarounds to support generic types with forwardRef + memo
var WithRef = /*#__PURE__*/forwardRef(LinkIconButtonBase);

/**
 * __Link Icon Button__
 *
 * Renders a link in the style of an icon button.
 *
 * - [Examples](https://atlassian.design/components/link-icon-button/examples)
 * - [Code](https://atlassian.design/components/link-icon-button/code)
 * - [Usage](https://atlassian.design/components/link-icon-button/usage)
 */
var LinkIconButton = /*#__PURE__*/memo(WithRef);
export default LinkIconButton;