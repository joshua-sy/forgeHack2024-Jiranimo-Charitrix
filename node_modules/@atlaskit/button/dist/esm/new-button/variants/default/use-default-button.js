import React, { Fragment } from 'react';
import Content from '../shared/content';
import IconRenderer from '../shared/icon-renderer';
import useButtonBase from '../shared/use-button-base';
/**
 * __Use default button base__
 *
 * A React hook that accepts a set of default Button props,
 * and processes them to return consistent base props for usage
 * across Button and LinkButton variants.
 *
 * @private
 */
var useDefaultButton = function useDefaultButton(_ref) {
  var analyticsContext = _ref.analyticsContext,
    appearance = _ref.appearance,
    ariaLabel = _ref.ariaLabel,
    ariaLabelledBy = _ref.ariaLabelledBy,
    autoFocus = _ref.autoFocus,
    buttonType = _ref.buttonType,
    children = _ref.children,
    iconAfter = _ref.iconAfter,
    iconBefore = _ref.iconBefore,
    interactionName = _ref.interactionName,
    isDisabled = _ref.isDisabled,
    _ref$isLoading = _ref.isLoading,
    isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,
    isSelected = _ref.isSelected,
    onClick = _ref.onClick,
    onClickCapture = _ref.onClickCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    ref = _ref.ref,
    shouldFitContainer = _ref.shouldFitContainer,
    spacing = _ref.spacing,
    testId = _ref.testId,
    UNSAFE_iconAfter_size = _ref.UNSAFE_iconAfter_size,
    UNSAFE_iconBefore_size = _ref.UNSAFE_iconBefore_size;
  var baseProps = useButtonBase({
    analyticsContext: analyticsContext,
    appearance: appearance,
    autoFocus: autoFocus,
    ariaLabel: ariaLabel,
    ariaLabelledBy: ariaLabelledBy,
    buttonType: buttonType,
    children: /*#__PURE__*/React.createElement(Fragment, null, iconBefore && /*#__PURE__*/React.createElement(Content, {
      type: "icon",
      position: "before",
      isLoading: isLoading
    }, /*#__PURE__*/React.createElement(IconRenderer, {
      icon: iconBefore,
      size: UNSAFE_iconBefore_size
    })), children && /*#__PURE__*/React.createElement(Content, {
      isLoading: isLoading
    }, children), iconAfter && /*#__PURE__*/React.createElement(Content, {
      type: "icon",
      position: "after",
      isLoading: isLoading
    }, /*#__PURE__*/React.createElement(IconRenderer, {
      icon: iconAfter,
      size: UNSAFE_iconAfter_size
    }))),
    interactionName: interactionName,
    isDisabled: isDisabled,
    isLoading: isLoading,
    isSelected: isSelected,
    onClick: onClick,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onTouchStartCapture: onTouchStartCapture,
    onTouchEndCapture: onTouchEndCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onClickCapture: onClickCapture,
    ref: ref,
    shouldFitContainer: shouldFitContainer,
    spacing: spacing,
    testId: testId,
    hasIconBefore: Boolean(iconBefore),
    hasIconAfter: Boolean(iconAfter)
  });
  return baseProps;
};
export default useDefaultButton;