import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import React from 'react';
import { Box, xcss } from '@atlaskit/primitives';
var textStyles = xcss({
  // content can grow and shrink
  flexGrow: 1,
  flexShrink: 1,
  // ellipsis for overflow text
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});
var iconStyles = xcss({
  display: 'flex',
  // icon size cannot grow and shrink
  flexGrow: 0,
  flexShrink: 0,
  alignSelf: 'center',
  fontSize: 0,
  lineHeight: 0,
  userSelect: 'none'
});
var commonStyles = xcss({
  transition: 'opacity 0.3s'
});
var fadeStyles = xcss({
  opacity: 0
});

/**
 * These CSS variables consumed by the new icons, to allow them to have appropriate
 * padding inside Button while also maintaining spacing for the existing icons.
 *
 * These styles can be removed once the new icons are fully rolled out, feature flag
 * platform.design-system-team.enable-new-icons is cleaned up,
 * and we bump Button to set padding based on the new icons.
 */
var beforeIconStyles = xcss({
  // @ts-ignore
  '--ds--button--new-icon-padding-start': "var(--ds-space-050, 4px)",
  // @ts-ignore
  '--ds--button--new-icon-padding-end': "var(--ds-space-025, 2px)"
});
var afterIconStyles = xcss({
  // @ts-ignore
  '--ds--button--new-icon-padding-start': "var(--ds-space-025, 2px)",
  // @ts-ignore
  '--ds--button--new-icon-padding-end': "var(--ds-space-050, 4px)"
});
/**
 * __Content__
 *
 * Used for slots within a Button, including icons and text content.
 */
var Content = function Content(_ref) {
  var children = _ref.children,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'text' : _ref$type,
    isLoading = _ref.isLoading,
    position = _ref.position;
  return /*#__PURE__*/React.createElement(Box, {
    as: "span",
    xcss: [commonStyles].concat(_toConsumableArray(type === 'text' ? [textStyles] : [iconStyles]), _toConsumableArray(isLoading ? [fadeStyles] : []), _toConsumableArray(position === 'before' ? [beforeIconStyles] : []), _toConsumableArray(position === 'after' ? [afterIconStyles] : []))
  }, children);
};
export default Content;