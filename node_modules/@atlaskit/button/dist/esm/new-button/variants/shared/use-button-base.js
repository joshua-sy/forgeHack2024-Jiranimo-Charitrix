import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { Fragment, useRef } from 'react';
import { uid } from 'react-uid';
import mergeRefs from '@atlaskit/ds-lib/merge-refs';
import useAutoFocus from '@atlaskit/ds-lib/use-auto-focus';
import { getBooleanFF } from '@atlaskit/platform-feature-flags';
import { Box, xcss } from '@atlaskit/primitives';
import * as colors from '@atlaskit/theme/colors';
import VisuallyHidden from '@atlaskit/visually-hidden';
import { useSplitButtonContext } from '../../containers/split-button/split-button-context';
import blockEvents from './block-events';
import { LOADING_LABEL } from './constants';
import renderLoadingOverlay from './loading-overlay';
var buttonStyles = xcss({
  display: 'inline-flex',
  boxSizing: 'border-box',
  width: 'auto',
  maxWidth: '100%',
  position: 'relative',
  alignItems: 'baseline',
  justifyContent: 'center',
  columnGap: 'space.050',
  borderRadius: 'border.radius.100',
  borderWidth: 'border.width.0',
  flexShrink: 0,
  height: "".concat(32 / 14, "em"),
  paddingInlineEnd: 'space.150',
  paddingInlineStart: 'space.150',
  textAlign: 'center',
  transition: 'background 0.1s ease-out',
  verticalAlign: 'middle',
  '::after': {
    borderRadius: 'inherit',
    inset: 'space.0',
    borderStyle: 'solid',
    borderWidth: "var(--ds-border-width, 1px)",
    pointerEvents: 'none',
    position: 'absolute'
  }
});
var hardCodedButtonStyles = xcss({
  fontFamily: 'inherit',
  fontSize: 'inherit',
  fontStyle: 'normal',
  fontWeight: 500,
  lineHeight: "".concat(32 / 14, "em"),
  paddingBlock: 'space.0'
});
var tokenizedButtonStyles = xcss({
  font: "var(--ds-font-body, normal 400 14px/20px ui-sans-serif, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)",
  fontWeight: "var(--ds-font-weight-medium, 500)",
  paddingBlock: 'space.075'
});
var defaultInteractiveStyles = xcss({
  ':hover': {
    background: "var(--ds-background-neutral-hovered, #091e4214)",
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text, ".concat(colors.N500, ")")
  },
  ':active': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-neutral-pressed, ".concat(colors.B75, ")"),
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text, ".concat(colors.B400, ")")
  }
});
var defaultInteractiveRefreshedStyles = xcss({
  ':hover': {
    background: "var(--ds-background-neutral-subtle-hovered, #091E420F)",
    color: 'color.text.subtle'
  },
  ':active': {
    background: "var(--ds-background-neutral-subtle-pressed, #091E4224)",
    color: 'color.text.subtle'
  }
});
var defaultStyles = xcss({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values
  background: "var(--ds-background-neutral, ".concat(colors.N20A, ")"),
  // @ts-expect-error â€” using tokens for explicit fallback usage.
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values --  -- Ignored via go/DSP-18766
  color: "var(--ds-text, ".concat(colors.N500, ")"),
  ':visited': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text, ".concat(colors.N500, ")")
  }
});
var defaultRefreshedStyles = xcss({
  background: "var(--ds-background-neutral-subtle, #00000000)",
  color: 'color.text.subtle',
  '::after': {
    content: '""',
    borderColor: 'color.border'
  },
  ':visited': {
    color: 'color.text.subtle'
  }
});
var primaryStyles = xcss({
  background: "var(--ds-background-brand-bold, #0052CC)",
  // @ts-expect-error
  color: "var(--ds-text-inverse, #FFFFFF)",
  ':visited': {
    // @ts-expect-error
    color: "var(--ds-text-inverse, #FFFFFF)"
  }
});
var primaryInteractiveStyles = xcss({
  ':hover': {
    // @ts-expect-error
    color: "var(--ds-text-inverse, #FFFFFF)",
    background: "var(--ds-background-brand-bold-hovered, #0065FF)"
  },
  ':active': {
    // @ts-expect-error
    color: "var(--ds-text-inverse, #FFFFFF)",
    background: "var(--ds-background-brand-bold-pressed, #0747A6)"
  }
});
var warningStyles = xcss({
  background: "var(--ds-background-warning-bold, #FFAB00)",
  // @ts-expect-error
  color: "var(--ds-text-warning-inverse, #172B4D)",
  ':visited': {
    // @ts-expect-error
    color: "var(--ds-text-warning-inverse, #172B4D)"
  }
});
var warningInteractiveStyles = xcss({
  ':hover': {
    // @ts-expect-error
    color: "var(--ds-text-warning-inverse, #172B4D)",
    background: "var(--ds-background-warning-bold-hovered, #FFC400)"
  },
  ':active': {
    // @ts-expect-error
    color: "var(--ds-text-warning-inverse, #172B4D)",
    background: "var(--ds-background-warning-bold-pressed, #FF991F)"
  }
});
var dangerStyles = xcss({
  background: "var(--ds-background-danger-bold, #DE350B)",
  color: 'color.text.inverse',
  ':visited': {
    color: 'color.text.inverse'
  }
});
var dangerInteractiveStyles = xcss({
  ':hover': {
    color: 'color.text.inverse',
    background: "var(--ds-background-danger-bold-hovered, #FF5630)"
  },
  ':active': {
    color: 'color.text.inverse',
    background: "var(--ds-background-danger-bold-pressed, #BF2600)"
  }
});
var discoveryStyles = xcss({
  background: "var(--ds-background-discovery-bold, #5243AA)",
  color: 'color.text.inverse',
  ':visited': {
    color: 'color.text.inverse'
  }
});
var discoveryInteractiveStyles = xcss({
  ':hover': {
    color: 'color.text.inverse',
    background: "var(--ds-background-discovery-bold-hovered, #8777D9)"
  },
  ':active': {
    color: 'color.text.inverse',
    background: "var(--ds-background-discovery-bold-pressed, #5243AA)"
  }
});
var subtleStyles = xcss({
  background: "var(--ds-background-neutral-subtle, transparent)",
  // @ts-expect-error
  color: "var(--ds-text, #42526E)",
  ':visited': {
    // @ts-expect-error
    color: "var(--ds-text, #42526E)"
  }
});
var subtleRefreshedStyles = xcss({
  background: "var(--ds-background-neutral-subtle, transparent)",
  color: 'color.text.subtle',
  ':visited': {
    color: 'color.text.subtle'
  }
});
var subtleInteractiveStyles = xcss({
  ':hover': {
    background: "var(--ds-background-neutral-subtle-hovered, #091e4214)",
    // @ts-expect-error
    color: "var(--ds-text, #42526E)"
  },
  ':active': {
    background: "var(--ds-background-neutral-subtle-pressed, #B3D4FF)",
    // @ts-expect-error
    color: "var(--ds-text, #42526E)"
  }
});
var subtleInteractiveRefreshedStyles = xcss({
  ':hover': {
    background: "var(--ds-background-neutral-subtle-hovered, #091e4214)",
    color: 'color.text.subtle'
  },
  ':active': {
    background: "var(--ds-background-neutral-subtle-pressed, #B3D4FF)",
    color: 'color.text.subtle'
  }
});
var linkStyles = xcss({
  // @ts-expect-error
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  color: "var(--ds-link, ".concat(colors.B400, ")"),
  background: "var(--ds-background-neutral-subtle, transparent)",
  textDecoration: 'none',
  ':hover': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-link, ".concat(colors.B300, ")"),
    background: "var(--ds-background-neutral-subtle, transparent)"
  },
  ':active': {
    // @ts-expect-error
    color: "var(--ds-link-pressed, #0055CC)",
    background: "var(--ds-background-neutral-subtle, transparent)"
  },
  ':visited': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-link, ".concat(colors.B400, ")")
  }
});
var subtleLinkStyles = xcss({
  // @ts-expect-error
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  color: "var(--ds-text-subtle, ".concat(colors.N200, ")"),
  background: "var(--ds-background-neutral-subtle, transparent)",
  textDecoration: 'none',
  ':hover': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-subtle, ".concat(colors.N90, ")"),
    background: "var(--ds-background-neutral-subtle, transparent)"
  },
  ':active': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text, ".concat(colors.N400, ")"),
    background: "var(--ds-background-neutral-subtle, transparent)"
  },
  ':visited': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-subtle, ".concat(colors.N200, ")")
  }
});

// Required due to Jira's AUI CSS reset: https://product-fabric.atlassian.net/browse/DSP-15687
var linkDecorationUnsetStyles = xcss({
  textDecoration: 'none',
  ':hover': {
    textDecoration: 'none'
  },
  ':active': {
    textDecoration: 'none'
  },
  ':focus': {
    textDecoration: 'none'
  }
});
var linkDecorationStyles = xcss({
  ':hover': {
    textDecoration: 'underline'
  },
  ':focus': {
    textDecoration: 'underline'
  }
});
var disabledStyles = xcss({
  cursor: 'not-allowed',
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  background: "var(--ds-background-disabled, ".concat(colors.N20A, ")"),
  // @ts-expect-error
  color: "var(--ds-text-disabled, #091E424F)",
  ':hover': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-disabled, ".concat(colors.N20A, ")"),
    // @ts-expect-error
    color: "var(--ds-text-disabled, #091E424F)"
  },
  ':active': {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-disabled, ".concat(colors.N20A, ")"),
    // @ts-expect-error
    color: "var(--ds-text-disabled, #091E424F)"
  },
  '::after': {
    content: 'none'
  }
});
var selectedStyles = xcss({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  background: "var(--ds-background-selected, ".concat(colors.N700, ")"),
  // @ts-expect-error
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  color: "var(--ds-text-selected, ".concat(colors.N20, ")"),
  ':visited': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(colors.N20, ")")
  }
});
var selectedRefreshedStyles = xcss({
  background: "var(--ds-background-selected, #E9F2FF)",
  color: 'color.text.selected',
  '::after': {
    content: '""',
    borderColor: 'color.border.selected'
  },
  ':visited': {
    color: 'color.text.selected'
  }
});
var selectedInteractiveStyles = xcss({
  ':hover': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(colors.N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected-hovered, ".concat(colors.N700, ")")
  },
  ':active': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(colors.N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected-pressed, ".concat(colors.N700, ")")
  }
});

// TODO: Remove me once we kill color fallbacks
var selectedWarningStyles = xcss({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  background: "var(--ds-background-selected, ".concat(colors.Y400, ")"),
  // @ts-expect-error
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  color: "var(--ds-text-selected, ".concat(colors.N800, ")"),
  ':hover': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(colors.N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected, ".concat(colors.Y400, ")")
  },
  ':active': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(colors.N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected, ".concat(colors.Y400, ")")
  }
});

// TODO: Remove me once we kill color fallbacks
var selectedDangerStyles = xcss({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  background: "var(--ds-background-selected, ".concat(colors.R500, ")"),
  // @ts-expect-error
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  color: "var(--ds-text-selected, ".concat(colors.N20, ")"),
  ':hover': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(colors.N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected, ".concat(colors.R500, ")")
  },
  ':active': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(colors.N20, ")"),
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    background: "var(--ds-background-selected, ".concat(colors.R500, ")")
  }
});

// TODO: Remove me once we kill color fallbacks
var selectedDiscoveryStyles = xcss({
  background: "var(--ds-background-selected, #403294)",
  // @ts-expect-error
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
  color: "var(--ds-text-selected, ".concat(colors.N20, ")"),
  ':hover': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(colors.N20, ")"),
    background: "var(--ds-background-selected, #403294)"
  },
  ':active': {
    // @ts-expect-error
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    color: "var(--ds-text-selected, ".concat(colors.N20, ")"),
    background: "var(--ds-background-selected, #403294)"
  }
});
var spacingCompactStyles = xcss({
  columnGap: 'space.050',
  height: "".concat(24 / 14, "em"),
  paddingInlineEnd: 'space.150',
  paddingInlineStart: 'space.150',
  verticalAlign: 'middle'
});
var baseSpacingCompactStyles = xcss({
  lineHeight: "".concat(24 / 14, "em")
});
var tokenizedSpacingCompactStyles = xcss({
  paddingBlock: 'space.025'
});
var spacingNoneStyles = xcss({
  columnGap: 'space.0',
  height: 'auto',
  lineHeight: 'inherit',
  paddingInlineEnd: 'space.0',
  paddingInlineStart: 'space.0',
  verticalAlign: 'baseline'
});
var tokenizedSpacingNoneStyles = xcss({
  paddingBlock: 'space.0'
});
var circleStyles = xcss({
  borderRadius: 'border.radius.circle'
});
var fullWidthStyles = xcss({
  width: '100%'
});
var loadingStyles = xcss({
  cursor: 'progress'
});
var iconButtonStyles = xcss({
  height: "".concat(32 / 14, "em"),
  width: "".concat(32 / 14, "em"),
  paddingInlineEnd: 'space.0',
  paddingInlineStart: 'space.0'
});
var iconButtonCompactStyles = xcss({
  width: "".concat(24 / 14, "em"),
  height: "".concat(24 / 14, "em")
});
var buttonIconBeforeStyles = xcss({
  paddingInlineStart: 'space.100'
});
var buttonIconAfterStyles = xcss({
  paddingInlineEnd: 'space.100'
});
var splitButtonStyles = xcss({
  ':focus-visible': {
    zIndex: 'card'
  }
});
var navigationSplitButtonStyles = xcss({
  width: '24px',
  backgroundColor: 'color.background.neutral.subtle',
  paddingInlineEnd: 'space.075',
  paddingInlineStart: 'space.075'
});
var loadingOverlayStyles = xcss({
  display: 'flex',
  position: 'absolute',
  alignItems: 'center',
  justifyContent: 'center',
  insetBlockEnd: 'space.0',
  insetBlockStart: 'space.0',
  insetInlineEnd: 'space.0',
  insetInlineStart: 'space.0'
});

/**
 * __Use button base__
 *
 * A React hook that accepts a set of common Button props,
 * and processes them to return consistent base props for usage
 * across various Button components.
 *
 * It also:
 * - Implements auto focus when enabled.
 * - Appends the `onClick` event with UFO analytics tracking.
 *
 * @private
 */
var useButtonBase = function useButtonBase(_ref) {
  var _ref$appearance = _ref.appearance,
    propAppearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    _ref$autoFocus = _ref.autoFocus,
    autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
    _ref$isDisabled = _ref.isDisabled,
    propIsDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
    _ref$isLoading = _ref.isLoading,
    isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,
    _ref$isSelected = _ref.isSelected,
    propIsSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
    _ref$isIconButton = _ref.isIconButton,
    isIconButton = _ref$isIconButton === void 0 ? false : _ref$isIconButton,
    _ref$isCircle = _ref.isCircle,
    isCircle = _ref$isCircle === void 0 ? false : _ref$isCircle,
    _ref$hasIconBefore = _ref.hasIconBefore,
    hasIconBefore = _ref$hasIconBefore === void 0 ? false : _ref$hasIconBefore,
    _ref$hasIconAfter = _ref.hasIconAfter,
    hasIconAfter = _ref$hasIconAfter === void 0 ? false : _ref$hasIconAfter,
    children = _ref.children,
    onClick = _ref.onClick,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onClickCapture = _ref.onClickCapture,
    ref = _ref.ref,
    _ref$shouldFitContain = _ref.shouldFitContainer,
    shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain,
    _ref$spacing = _ref.spacing,
    propSpacing = _ref$spacing === void 0 ? 'default' : _ref$spacing,
    testId = _ref.testId,
    ariaLabel = _ref.ariaLabel,
    ariaLabelledBy = _ref.ariaLabelledBy;
  var localRef = useRef(null);
  var splitButtonContext = useSplitButtonContext();
  // TODO: Use React 18's useId() hook when we update.
  // eslint-disable-next-line @repo/internal/react/disallow-unstable-values
  var loadingLabelId = uid({
    ariaLabelledBy: ariaLabelledBy
  });
  var isSplitButton = Boolean(splitButtonContext);
  var isNavigationSplitButton = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.isNavigationSplitButton) || false;
  var isDefaultAppearanceSplitButton = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.appearance) === 'default';
  var appearance = getBooleanFF('platform.design-system-team.component-visual-refresh_t8zbo') && isDefaultAppearanceSplitButton ? 'subtle' : (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.appearance) || propAppearance;
  var spacing = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.spacing) || propSpacing;
  var isDisabled = (splitButtonContext === null || splitButtonContext === void 0 ? void 0 : splitButtonContext.isDisabled) || propIsDisabled;
  var isInteractive = !isDisabled && !isLoading;
  // Also treat loading buttons as disabled
  var isEffectivelyDisabled = isDisabled || isLoading;
  var isSelected = propIsSelected && !isDisabled;
  useAutoFocus(localRef, autoFocus);
  return _objectSpread({
    ref: mergeRefs([localRef, ref]),
    xcss: [getBooleanFF('platform.design-system-team.button-tokenised-typography-styles') ? tokenizedButtonStyles : hardCodedButtonStyles, buttonStyles, appearance === 'default' && (getBooleanFF('platform.design-system-team.component-visual-refresh_t8zbo') ? defaultRefreshedStyles : defaultStyles), appearance === 'default' && isInteractive && (getBooleanFF('platform.design-system-team.component-visual-refresh_t8zbo') ? defaultInteractiveRefreshedStyles : defaultInteractiveStyles), appearance === 'primary' && primaryStyles, appearance === 'primary' && isInteractive && primaryInteractiveStyles, appearance === 'warning' && warningStyles, appearance === 'warning' && isInteractive && warningInteractiveStyles, appearance === 'danger' && dangerStyles, appearance === 'danger' && isInteractive && dangerInteractiveStyles, appearance === 'discovery' && discoveryStyles, appearance === 'discovery' && isInteractive && discoveryInteractiveStyles, appearance === 'subtle' && (getBooleanFF('platform.design-system-team.component-visual-refresh_t8zbo') ? subtleRefreshedStyles : subtleStyles), appearance === 'subtle' && isInteractive && (getBooleanFF('platform.design-system-team.component-visual-refresh_t8zbo') ? subtleInteractiveRefreshedStyles : subtleInteractiveStyles), appearance === 'link' && linkStyles, appearance === 'subtle-link' && subtleLinkStyles, !isSelected && (appearance === 'link' || appearance === 'subtle-link') ? linkDecorationStyles : linkDecorationUnsetStyles, isSelected && (getBooleanFF('platform.design-system-team.component-visual-refresh_t8zbo') ? selectedRefreshedStyles : selectedStyles), isSelected && isInteractive && selectedInteractiveStyles,
    // TODO: remove me once we kill color fallbacks
    isSelected && appearance === 'danger' && selectedDangerStyles,
    // TODO: remove me once we kill color fallbacks
    isSelected && appearance === 'warning' && selectedWarningStyles,
    // TODO: remove me once we kill color fallbacks
    isSelected && appearance === 'discovery' && selectedDiscoveryStyles, isDisabled && disabledStyles, isCircle && !isSplitButton && circleStyles, spacing === 'compact' && spacingCompactStyles, spacing === 'compact' && (getBooleanFF('platform.design-system-team.button-tokenised-typography-styles') ? tokenizedSpacingCompactStyles : baseSpacingCompactStyles), spacing === 'none' && spacingNoneStyles, spacing === 'none' && getBooleanFF('platform.design-system-team.button-tokenised-typography-styles') && tokenizedSpacingNoneStyles, spacing !== 'none' && hasIconBefore && buttonIconBeforeStyles, spacing !== 'none' && hasIconAfter && buttonIconAfterStyles, isIconButton && iconButtonStyles, isIconButton && spacing === 'compact' && iconButtonCompactStyles, shouldFitContainer && fullWidthStyles, isLoading && loadingStyles, isSplitButton && splitButtonStyles, isNavigationSplitButton && navigationSplitButtonStyles],
    isDisabled: isEffectivelyDisabled,
    children: /*#__PURE__*/React.createElement(Fragment, null, children, isLoading ? /*#__PURE__*/React.createElement(Box, {
      as: "span",
      xcss: loadingOverlayStyles
    }, renderLoadingOverlay({
      spacing: spacing,
      appearance: appearance,
      isDisabled: isDisabled,
      isSelected: isSelected,
      testId: testId
    })) : null, isLoading && (children && !ariaLabel && !ariaLabelledBy || ariaLabelledBy) && /*#__PURE__*/React.createElement(VisuallyHidden, {
      id: loadingLabelId
    }, LOADING_LABEL)),
    'aria-label': isLoading && ariaLabel && !ariaLabelledBy ? "".concat(ariaLabel, " ").concat(LOADING_LABEL) : ariaLabel,
    'aria-labelledby': isLoading && ariaLabelledBy ? "".concat(ariaLabelledBy, " ").concat(loadingLabelId) : ariaLabelledBy
  }, blockEvents(isEffectivelyDisabled, {
    onClick: onClick,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onTouchStartCapture: onTouchStartCapture,
    onTouchEndCapture: onTouchEndCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onClickCapture: onClickCapture
  }));
};
export default useButtonBase;