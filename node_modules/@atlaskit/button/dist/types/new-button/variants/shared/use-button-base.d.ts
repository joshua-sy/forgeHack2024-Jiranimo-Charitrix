import React from 'react';
import { xcss } from '@atlaskit/primitives';
import { type Appearance, type CommonButtonProps, type Spacing } from '../types';
export type ControlledEvents<TagName extends HTMLElement> = Pick<React.DOMAttributes<TagName>, 'onMouseDownCapture' | 'onMouseUpCapture' | 'onKeyDownCapture' | 'onKeyUpCapture' | 'onTouchStartCapture' | 'onTouchEndCapture' | 'onPointerDownCapture' | 'onPointerUpCapture' | 'onClickCapture'> & Pick<CommonButtonProps<TagName>, 'onClick'>;
export type UseButtonBaseArgs<TagName extends HTMLElement> = {
    ref: React.Ref<TagName>;
    /**
     * The type of button. Used to pass action subject context to analytics.
     */
    buttonType: 'button' | 'link';
    isIconButton?: boolean;
    isCircle?: boolean;
    hasIconBefore?: boolean;
    hasIconAfter?: boolean;
    shouldFitContainer?: boolean;
    appearance?: Appearance;
    children: React.ReactNode;
    spacing?: Spacing;
    isLoading?: boolean;
    ariaLabel?: string;
    ariaLabelledBy?: string;
} & Pick<CommonButtonProps<TagName>, 'analyticsContext' | 'autoFocus' | 'interactionName' | 'isDisabled' | 'isSelected' | 'testId'> & ControlledEvents<TagName>;
type XCSS = ReturnType<typeof xcss>;
export type UseButtonBaseReturn<TagName extends HTMLElement> = {
    xcss: XCSS | Array<XCSS | false | undefined>;
    ref(node: TagName | null): void;
    children: React.ReactNode;
    isDisabled: boolean;
    'aria-label'?: string;
    'aria-labelledby'?: string;
} & ControlledEvents<TagName>;
/**
 * __Use button base__
 *
 * A React hook that accepts a set of common Button props,
 * and processes them to return consistent base props for usage
 * across various Button components.
 *
 * It also:
 * - Implements auto focus when enabled.
 * - Appends the `onClick` event with UFO analytics tracking.
 *
 * @private
 */
declare const useButtonBase: <TagName extends HTMLElement>({ appearance: propAppearance, autoFocus, isDisabled: propIsDisabled, isLoading, isSelected: propIsSelected, isIconButton, isCircle, hasIconBefore, hasIconAfter, children, onClick, onMouseDownCapture, onMouseUpCapture, onKeyDownCapture, onKeyUpCapture, onTouchStartCapture, onTouchEndCapture, onPointerDownCapture, onPointerUpCapture, onClickCapture, ref, shouldFitContainer, spacing: propSpacing, testId, ariaLabel, ariaLabelledBy, }: UseButtonBaseArgs<TagName>) => UseButtonBaseReturn<TagName>;
export default useButtonBase;
