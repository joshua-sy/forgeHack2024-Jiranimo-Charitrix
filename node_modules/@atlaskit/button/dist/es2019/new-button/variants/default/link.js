import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef, memo } from 'react';
import { getBooleanFF } from '@atlaskit/platform-feature-flags';
import Anchor from '@atlaskit/primitives/anchor';
import useDefaultButton from './use-default-button';
const LinkButtonBase = ({
  analyticsContext,
  appearance,
  'aria-label': ariaLabel,
  'aria-labelledby': ariaLabelledBy,
  autoFocus,
  children,
  href,
  iconAfter,
  iconBefore,
  interactionName,
  isDisabled,
  isSelected,
  onClick,
  onClickCapture,
  onKeyDownCapture,
  onKeyUpCapture,
  onMouseDownCapture,
  onMouseUpCapture,
  onPointerDownCapture,
  onPointerUpCapture,
  onTouchEndCapture,
  onTouchStartCapture,
  shouldFitContainer,
  spacing,
  testId,
  UNSAFE_iconAfter_size,
  UNSAFE_iconBefore_size,
  ...unsafeRest
}, ref) => {
  // @ts-expect-error
  const {
    className: _className,
    css: _css,
    as: _as,
    style: _style,
    ...saferRest
  } = unsafeRest;
  const rest = getBooleanFF('platform.design-system-team.remove-unsafe-spread-from-new-button_a2xhw') ? saferRest : unsafeRest;
  const baseProps = useDefaultButton({
    analyticsContext,
    appearance,
    ariaLabel,
    ariaLabelledBy,
    autoFocus,
    buttonType: 'link',
    children,
    iconAfter,
    iconBefore,
    interactionName,
    isDisabled,
    isSelected,
    onClick,
    onClickCapture,
    onKeyDownCapture,
    onKeyUpCapture,
    onMouseDownCapture,
    onMouseUpCapture,
    onPointerDownCapture,
    onPointerUpCapture,
    onTouchEndCapture,
    onTouchStartCapture,
    ref,
    shouldFitContainer,
    spacing,
    testId,
    UNSAFE_iconAfter_size,
    UNSAFE_iconBefore_size
  });
  return /*#__PURE__*/React.createElement(Anchor
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  , _extends({}, rest, {
    "aria-label": baseProps['aria-label'],
    "aria-labelledby": baseProps['aria-labelledby'],
    ref: baseProps.ref,
    xcss: baseProps.xcss,
    onClick: baseProps.onClick,
    onMouseDownCapture: baseProps.onMouseDownCapture,
    onMouseUpCapture: baseProps.onMouseUpCapture,
    onKeyDownCapture: baseProps.onKeyDownCapture,
    onKeyUpCapture: baseProps.onKeyUpCapture,
    onTouchStartCapture: baseProps.onTouchStartCapture,
    onTouchEndCapture: baseProps.onTouchEndCapture,
    onPointerDownCapture: baseProps.onPointerDownCapture,
    onPointerUpCapture: baseProps.onPointerUpCapture,
    onClickCapture: baseProps.onClickCapture,
    testId: testId
    /**
     * Disable link in an accessible way using `href`, `role`, and `aria-disabled`.
     * @see https://a11y-guidelines.orange.com/en/articles/disable-elements/#disable-a-link
     */
    // @ts-expect-error (`href` is required, we could make it optional but don't want to encourage this pattern elsewhere)
    ,
    href: baseProps.isDisabled ? undefined : href,
    role: baseProps.isDisabled ? 'link' : undefined,
    "aria-disabled": baseProps.isDisabled === true ? true : undefined,
    analyticsContext: analyticsContext,
    interactionName: interactionName,
    componentName: "LinkButton"
  }), baseProps.children);
};

// Workarounds to support generic types with forwardRef + memo
const WithRef = /*#__PURE__*/forwardRef(LinkButtonBase);

/**
 * __Link Button__
 *
 * Renders a link in the style of a button.
 *
 * - [Examples](https://atlassian.design/components/link-button/examples)
 * - [Code](https://atlassian.design/components/link-button/code)
 * - [Usage](https://atlassian.design/components/link-button/usage)
 */
const LinkButton = /*#__PURE__*/memo(WithRef);
export default LinkButton;