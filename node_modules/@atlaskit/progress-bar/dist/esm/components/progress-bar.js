/**
 * @jsxRuntime classic
 */
/** @jsx jsx */
import React from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx, keyframes } from '@emotion/react';
import { G300, N40A, N500 } from '@atlaskit/theme/colors';
var MIN_VALUE = 0;
var MAX_VALUE = 1;
var increasingBarAnimation = keyframes({
  from: {
    left: '-5%',
    width: '5%'
  },
  to: {
    left: '130%',
    width: ' 100%'
  }
});
var decreasingBarAnimation = keyframes({
  from: {
    left: '-80%',
    width: '80%'
  },
  to: {
    left: '110%',
    width: '10%'
  }
});
var containerStyles = css({
  width: "100%",
  height: 6,
  position: 'relative',
  background: "var(--ds-background-neutral, ".concat(N40A, ")"),
  borderRadius: "var(--ds-border-radius, 3px)",
  overflow: 'hidden'
});
var containerAppearance = {
  default: css({
    background: "var(--ds-background-neutral, ".concat(N40A, ")")
  }),
  success: css({
    background: "var(--ds-background-neutral, ".concat(N40A, ")")
  }),
  inverse: css({
    background: "var(--ds-background-inverse-subtle, rgba(255, 255, 255, 0.5))"
  })
};
var barAppearance = {
  default: css({
    background: "var(--ds-background-neutral-bold, ".concat(N500, ")")
  }),
  success: css({
    background: "var(--ds-background-success-bold, ".concat(G300, ")")
  }),
  inverse: css({
    background: "var(--ds-surface, white)"
  })
};
var barStyles = css({
  display: 'block',
  height: 6,
  position: 'absolute',
  borderRadius: "var(--ds-border-radius, 3px)"
});
var determinateBarStyles = css({
  transition: 'width 0.2s'
});
var increasingBarStyles = css({
  animation: "".concat(increasingBarAnimation, " 2s infinite")
});
var decreasingBarStyles = css({
  animation: "".concat(decreasingBarAnimation, " 2s 0.5s infinite")
});

/**
 * __Progress bar__
 *
 * A progress bar displays the status of a given process.
 *
 * - [Examples](https://atlassian.design/components/progress-bar/examples)
 * - [Code](https://atlassian.design/components/progress-bar/code)
 * - [Usage](https://atlassian.design/components/progress-bar/usage)
 */
var ProgressBar = function ProgressBar(_ref) {
  var _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    ariaLabel = _ref.ariaLabel,
    _ref$isIndeterminate = _ref.isIndeterminate,
    isIndeterminate = _ref$isIndeterminate === void 0 ? false : _ref$isIndeterminate,
    _ref$testId = _ref.testId,
    testId = _ref$testId === void 0 ? 'progress-bar' : _ref$testId,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? 0 : _ref$value;
  var valueParsed = isIndeterminate ? MIN_VALUE : Math.max(MIN_VALUE, Math.min(value, MAX_VALUE));
  return jsx("div", {
    css: [containerStyles, containerAppearance[appearance]],
    role: "progressbar",
    "aria-label": ariaLabel,
    "aria-valuemin": MIN_VALUE,
    "aria-valuenow": valueParsed,
    "aria-valuemax": MAX_VALUE,
    tabIndex: 0,
    "data-testid": testId
  }, isIndeterminate ? jsx(React.Fragment, null, jsx("span", {
    css: [barStyles, barAppearance[appearance], increasingBarStyles]
  }), jsx("span", {
    css: [barStyles, barAppearance[appearance], decreasingBarStyles]
  })) : jsx("span", {
    style: {
      width: "".concat(Number(value) * 100, "%")
    },
    css: [barStyles, barAppearance[appearance], determinateBarStyles]
  }));
};
export default ProgressBar;