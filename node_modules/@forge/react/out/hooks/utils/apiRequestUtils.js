"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertSuccessfulResponse = exports.getJSONData = exports.makeRequest = exports.withContext = exports.FETCH_HEADERS = void 0;
const bridge_1 = require("@forge/bridge");
const types_1 = require("../types/");
exports.FETCH_HEADERS = {
    Accept: 'application/json',
    'Content-Type': 'application/json'
};
// loads productContext and passes data to support API calls for GET, UPDATE, DELETE operations
const withContext = ({ originalOperation, apiEndpoints, entityType, origPropertyKey }) => async (...args) => {
    const context = await bridge_1.view.getContext();
    const propertyKey = entityType === 'Content' ? `forge-${context.localId}-${origPropertyKey}` : `forge-${origPropertyKey}`;
    if (entityType === 'Space' || entityType === 'Content') {
        const endpointFactory = apiEndpoints({ entityType, context });
        return originalOperation({ endpointFactory, propertyKey }, ...args);
    }
    else if (entityType === 'Issue') {
        const endpointFactory = apiEndpoints(context);
        return originalOperation({ endpointFactory, propertyKey, context }, ...args);
    }
    else {
        throw new Error('Invalid entity type.');
    }
};
exports.withContext = withContext;
const makeRequest = async ({ url, apiMethod, body, method }) => {
    const fetchOptions = { headers: exports.FETCH_HEADERS, method, body };
    try {
        return await apiMethod(url, fetchOptions);
    }
    catch (error) {
        throw new Error('An unknown network error occurred.');
    }
};
exports.makeRequest = makeRequest;
const getJSONData = async (response) => {
    try {
        const data = await response.json();
        return data;
    }
    catch (err) {
        throw new Error('An invalid response is received from the server');
    }
};
exports.getJSONData = getJSONData;
// checks if a response from the API is successful and throw error if not
const assertSuccessfulResponse = ({ entityType, propertyKey, operation, response }) => {
    if (!response.ok) {
        throw new types_1.EntityPropertyRequestFailedError({ entityType, propertyKey, operation, status: response.status });
    }
};
exports.assertSuccessfulResponse = assertSuccessfulResponse;
