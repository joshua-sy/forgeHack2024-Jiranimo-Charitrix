"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockJiraGetNonExistentRes = exports.mockJiraGetExistingRes = exports.mockJiraSuccessRes = exports.mockConfDeleteRes = exports.mockConfUpdateFunctionRes = exports.mockConfUpdateValueRes = exports.mockConfCreateRes = exports.mockConfGetNonExistentRes = exports.mockConfGetExistingRes = exports.mockFailedRes = exports.mockJiraContext = exports.mockConfContext = exports.UPDATED_PROP_VALUE = exports.EXISTING_PROP_VALUE = exports.DEFAULT_PROP_VALUE = void 0;
// mock property values
_a = [1, 2, 3], exports.DEFAULT_PROP_VALUE = _a[0], exports.EXISTING_PROP_VALUE = _a[1], exports.UPDATED_PROP_VALUE = _a[2];
exports.mockConfContext = {
    localId: 'MOCK_LOCAL_ID',
    extension: {
        space: {
            id: 'MOCK_SPACE_ID'
        },
        content: {
            id: 'MOCK_PAGE_ID'
        }
    }
};
exports.mockJiraContext = {
    localId: 'MOCK_LOCAL_ID',
    extension: {
        issue: {
            id: 'MOCK_ISSUE_ID'
        }
    }
};
/**
 * Mock functions for API calls
 */
exports.mockFailedRes = {
    ok: false,
    status: 400
};
exports.mockConfGetExistingRes = {
    ok: true,
    status: 200,
    json: () => ({
        results: [{ id: 'MOCK_PROP_ID', value: exports.EXISTING_PROP_VALUE, version: { number: exports.EXISTING_PROP_VALUE } }]
    })
};
exports.mockConfGetNonExistentRes = {
    ok: true,
    status: 200,
    json: () => ({
        results: []
    })
};
exports.mockConfCreateRes = {
    ok: true,
    status: 201,
    json: () => ({ id: 'MOCK_PROP_ID', value: exports.DEFAULT_PROP_VALUE })
};
exports.mockConfUpdateValueRes = {
    ok: true,
    status: 200,
    json: () => ({ id: 'MOCK_PROP_ID', value: exports.UPDATED_PROP_VALUE })
};
exports.mockConfUpdateFunctionRes = {
    ok: true,
    status: 200,
    json: () => ({ id: 'MOCK_PROP_ID', value: exports.UPDATED_PROP_VALUE * exports.EXISTING_PROP_VALUE })
};
exports.mockConfDeleteRes = {
    ok: true,
    status: 204
};
// jira issue responses
exports.mockJiraSuccessRes = {
    ok: true,
    status: 201
};
exports.mockJiraGetExistingRes = {
    ok: true,
    status: 204,
    json: () => ({ key: 'MOCK_PROP_KEY', value: exports.EXISTING_PROP_VALUE })
};
exports.mockJiraGetNonExistentRes = {
    ok: false,
    status: 404
};
