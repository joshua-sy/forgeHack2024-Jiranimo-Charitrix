"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_hooks_1 = require("@testing-library/react-hooks");
const useForm_1 = require("../useForm");
jest.mock('react', () => ({
    ...jest.requireActual('react'),
    useId: jest.fn().mockReturnValue('mocked-id')
}));
describe('useForm with no default values', () => {
    const { result } = (0, react_hooks_1.renderHook)(() => (0, useForm_1.useForm)());
    it('register should return an id', () => {
        const { register } = result.current;
        const fieldProps = register('username');
        expect(fieldProps.id).toBe('form-mocked-id-username');
    });
    it('register should return isDisabled as true', () => {
        const { register } = result.current;
        const fieldProps = register('username', { disabled: true });
        expect(fieldProps.isDisabled).toBe(true);
    });
    it('getFieldId should return the correct id', () => {
        const { getFieldId } = result.current;
        const fieldId = getFieldId('username');
        expect(fieldId).toBe('form-mocked-id-username');
    });
});
describe('useForm with default values', () => {
    const { result } = (0, react_hooks_1.renderHook)(() => (0, useForm_1.useForm)({ defaultValues: { checkbox: true, textfield: 'test' } }));
    it('boolean default values should pass a defaultChecked prop', () => {
        const { register } = result.current;
        const fieldProps = register('checkbox');
        expect(fieldProps.defaultChecked).toBe(true);
    });
    it('non boolean values should pass a defaultValue prop', () => {
        const { register } = result.current;
        const fieldProps = register('textfield');
        expect(fieldProps.defaultValue).toBe('test');
    });
});
