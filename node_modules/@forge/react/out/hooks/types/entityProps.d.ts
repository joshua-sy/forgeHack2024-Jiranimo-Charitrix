import { ConfluenceEntityType, JiraEntityType } from '.';
export declare type PropOperation = 'fetch' | 'create' | 'update' | 'delete';
export declare type EntityPropertyUseParams<PropValue> = {
    entityManager: EntityManager<PropValue>;
    defaultRetryCount?: number;
};
export declare type EntityManager<PropValue> = {
    get: () => Promise<PropValue>;
    update: (valueUpdate: ValueUpdate<PropValue>) => Promise<PropValue>;
    delete: () => Promise<void>;
};
export declare type ManagePropsData<PropValue> = {
    entityType: ConfluenceEntityType | JiraEntityType;
    origPropertyKey: string;
    initValue: PropValue;
};
export declare type ResponseAssertData = {
    entityType: string;
    propertyKey: string;
    operation: PropOperation;
    response: Response;
};
declare type EntityErrorData = {
    entityType: string;
    propertyKey: string;
    operation: PropOperation;
    status: number;
};
export declare class EntityPropertyRequestFailedError extends Error {
    constructor({ entityType, propertyKey, operation, status }: EntityErrorData);
}
export declare type EntityContext = {
    localId: string;
    extension: {
        [entityType: string]: {
            id: string;
        };
    };
};
export declare type Property<PropValue> = {
    key: string;
    value: PropValue;
};
export declare type EndpointStringFactory = {
    create: (...propIdentifier: string[]) => string;
    fetch: (...propIdentifier: string[]) => string;
    update: (...propIdentifier: string[]) => string;
    delete: (...propIdentifier: string[]) => string;
};
export declare type ValueUpdate<PropValue> = PropValue | ((origValue: unknown) => PropValue);
export declare type RequestData = {
    url: string;
    apiMethod: (restPath: string, fetchOptions?: RequestInit) => Promise<Response>;
    body?: string;
    method: 'GET' | 'POST' | 'DELETE' | 'PUT';
};
export declare type EndpointContextData = {
    originalOperation: Function;
    apiEndpoints: (...args: any[]) => EndpointStringFactory;
    entityType: ConfluenceEntityType | JiraEntityType;
    origPropertyKey: string;
};
export {};
//# sourceMappingURL=entityProps.d.ts.map