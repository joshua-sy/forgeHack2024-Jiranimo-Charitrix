"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findElementInForgeDoc = exports.getLastBridgeCallForgeDoc = exports.getLastBridgeCall = exports.setupBridge = void 0;
// In an actual UI Kit 2 application the bridge is added to the global namespace by scripts served
// from the Forge CDN. In order to be able to test our reconciler we need to see what data is being
// passed over the bridge. This function simulates the function and allows tests to access all the
// calls that are made.
const setupBridge = () => {
    const bridgeCalls = [];
    // @ts-ignore
    global['self'] = {
        __bridge: {
            // @ts-ignore to get past type error from new tsconfig lib
            callBridge: (cmd, data) => {
                bridgeCalls.push({ cmd, data });
            }
        }
    };
    return bridgeCalls;
};
exports.setupBridge = setupBridge;
const getLastBridgeCall = (bridgeCalls) => {
    if (bridgeCalls.length === 0) {
        return null;
    }
    return bridgeCalls[bridgeCalls.length - 1];
};
exports.getLastBridgeCall = getLastBridgeCall;
const getLastBridgeCallForgeDoc = (bridgeCalls) => {
    const lastBridgeCall = (0, exports.getLastBridgeCall)(bridgeCalls);
    if (lastBridgeCall === null) {
        return lastBridgeCall;
    }
    return lastBridgeCall.data.forgeDoc;
};
exports.getLastBridgeCallForgeDoc = getLastBridgeCallForgeDoc;
const findElementInForgeDoc = (forgeDoc, key) => {
    if (forgeDoc === null) {
        return;
    }
    if (forgeDoc.key === key) {
        return forgeDoc;
    }
    const { children } = forgeDoc;
    if (forgeDoc.children) {
        for (const child of children) {
            const result = (0, exports.findElementInForgeDoc)(child, key);
            if (result) {
                return result;
            }
        }
    }
    return;
};
exports.findElementInForgeDoc = findElementInForgeDoc;
