"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = tslib_1.__importDefault(require("react"));
const components_1 = require("../components");
const reconcilerTestRenderer_1 = tslib_1.__importDefault(require("./reconcilerTestRenderer"));
const testUtils_1 = require("./testUtils");
describe('reconciled output', () => {
    let bridgeCalls = [];
    beforeAll(async () => {
        bridgeCalls = (0, testUtils_1.setupBridge)();
    });
    it('renders Inline ForgeDoc', async () => {
        const Test = () => {
            return ((0, jsx_runtime_1.jsx)(react_1.default.Fragment, { children: (0, jsx_runtime_1.jsxs)(components_1.Inline, { space: "space.500", children: [(0, jsx_runtime_1.jsxs)(components_1.Inline, { alignInline: "start", space: "space.100", children: [(0, jsx_runtime_1.jsx)(components_1.Heading, { as: "h3", children: "Hug" }), (0, jsx_runtime_1.jsx)(components_1.Tag, { color: "greyLight", text: "1" }), (0, jsx_runtime_1.jsx)(components_1.Tag, { color: "blueLight", text: "2" }), (0, jsx_runtime_1.jsx)(components_1.Tag, { color: "greenLight", text: "3" }), (0, jsx_runtime_1.jsx)(components_1.Tag, { color: "red", text: "Really looooooooooooooooooong" }), (0, jsx_runtime_1.jsx)(components_1.Button, { appearance: "primary", onClick: jest.fn(), children: "Button" })] }), (0, jsx_runtime_1.jsxs)(components_1.Inline, { alignInline: "start", space: "space.100", children: [(0, jsx_runtime_1.jsx)(components_1.Heading, { as: "h3", children: "Fill" }), (0, jsx_runtime_1.jsx)(components_1.Tag, { color: "greyLight", text: "1" }), (0, jsx_runtime_1.jsx)(components_1.Tag, { color: "blueLight", text: "2" }), (0, jsx_runtime_1.jsx)(components_1.Tag, { color: "greenLight", text: "3" }), (0, jsx_runtime_1.jsx)(components_1.Tag, { color: "red", text: "Really looooooooooooooooooong" }), (0, jsx_runtime_1.jsx)(components_1.Button, { appearance: "primary", onClick: jest.fn(), children: "Button" })] })] }) }));
        };
        await reconcilerTestRenderer_1.default.create((0, jsx_runtime_1.jsx)(Test, {}));
        const forgeDoc = (0, testUtils_1.getLastBridgeCallForgeDoc)(bridgeCalls);
        expect(forgeDoc).toHaveProperty('type', 'Root');
        expect(forgeDoc).toHaveProperty('children[0].type', 'Inline');
    });
});
