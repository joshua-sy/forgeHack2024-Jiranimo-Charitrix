import { ReactElement } from 'react';
import { HostConfig } from 'react-reconciler';
declare type ElementType = string;
declare type ElementProps = InstanceProps;
export interface ForgeDoc {
    type: ElementType;
    props: ElementProps;
    children: ForgeDoc[];
    key: string;
    forgeReactMajorVersion?: number;
}
export declare type CallBridge = (cmd: string, data: {
    forgeDoc: ForgeDoc;
}) => void;
export declare const callBridge: CallBridge;
declare type CreateElement = (args: {
    type: ElementType;
    props: InstanceProps;
    forgeReactMajorVersion?: number;
}) => ForgeDoc;
export declare const createElement: CreateElement;
export declare const appendChild: (parent: ForgeDoc, child: ForgeDoc) => void;
export declare const insertBefore: (parent: ForgeDoc, child: ForgeDoc, beforeChild: ForgeDoc) => void;
/**
 * Performs a shallow comparison of the old and new props for a component, but doesn't
 * compare the "children" prop. This works because the custom reconciler extracts the
 * "children" prop from the ForgeDoc and includes it separately.
 *
 * This function is used in prepareUpdate to determine whether or not to increment the
 * reconciliationCount for the component - the reconciliationCount should only be incremented
 * if the props have changed.
 *
 * @param newProps The new props being passed to the component
 * @param oldProps The old props the component previously had
 * @returns True if the props are equal and false otherwise
 */
export declare const nonChildPropsAreEqual: (oldProps: InstanceProps, newProps: InstanceProps) => boolean;
declare type HostConfigType = string;
declare type InstanceProps = Record<string, any>;
declare type Container = ForgeDoc;
declare type Instance = ForgeDoc;
declare type TextInstance = ForgeDoc;
declare type SuspenseInstance = ForgeDoc;
declare type HydratableInstance = ForgeDoc;
declare type PublicInstance = ForgeDoc;
declare type HostContext = any;
declare type UpdatePayload = any;
declare type ChildSet = any;
declare type TimeoutHandle = ReturnType<typeof setTimeout>;
declare type NoTimeout = -1;
export declare const hostConfig: HostConfig<HostConfigType, InstanceProps, Container, Instance, TextInstance, SuspenseInstance, HydratableInstance, PublicInstance, HostContext, UpdatePayload, ChildSet, TimeoutHandle, NoTimeout>;
export declare const ForgeReconciler: {
    render: (element: ReactElement) => void;
    addConfig: (element: ReactElement) => void;
};
export default ForgeReconciler;
//# sourceMappingURL=reconciler.d.ts.map