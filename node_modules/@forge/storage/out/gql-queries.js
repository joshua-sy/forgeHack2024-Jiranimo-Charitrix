"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomEntityQueries = exports.UntypedQueries = void 0;
class UntypedQueries {
}
exports.UntypedQueries = UntypedQueries;
UntypedQueries.get = (contextAri, key, encrypted) => ({
    query: `
      query forge_app_getApplicationStorageEntity($contextAri: ID!, $key: ID!, $encrypted: Boolean!) {
        appStoredEntity(contextAri: $contextAri, key: $key, encrypted: $encrypted) {
          key
          value
        }
      }
    `,
    variables: {
        contextAri,
        key,
        encrypted
    }
});
UntypedQueries.set = (contextAri, key, value, encrypted) => ({
    query: `
      mutation forge_app_setApplicationStorageEntity($input: SetAppStoredEntityMutationInput!) {
        appStorage{
          setAppStoredEntity(input: $input) {
            success

            errors {
              message
              extensions {
                errorType
                statusCode
              }
            }
          }
        }
      }
    `,
    variables: {
        input: {
            contextAri,
            key,
            value,
            encrypted
        }
    }
});
UntypedQueries.delete = (contextAri, key, encrypted) => ({
    query: `
      mutation forge_app_deleteApplicationStorageEntity($input: DeleteAppStoredEntityMutationInput!) {
        appStorage {
          deleteAppStoredEntity(input: $input) {
            success
  
            errors {
              message
              extensions {
                errorType
                statusCode
              }
            }
          }
        }
      }
    `,
    variables: {
        input: {
            contextAri,
            key,
            encrypted
        }
    }
});
UntypedQueries.listQuery = (contextAri, options) => {
    var _a, _b, _c;
    return ({
        query: `
      query forge_app_getApplicationStorageEntities($contextAri: ID!, $where: [AppStoredEntityFilter!], $cursor: String, $limit: Int) {
        appStoredEntities(contextAri: $contextAri, where: $where, after: $cursor, first: $limit) {
          edges {
            node {
              value
              key
            }
  
            cursor
          }
        }
      }
    `,
        variables: {
            contextAri,
            where: (_a = options.where) !== null && _a !== void 0 ? _a : null,
            cursor: (_b = options.cursor) !== null && _b !== void 0 ? _b : null,
            limit: (_c = options.limit) !== null && _c !== void 0 ? _c : null
        }
    });
};
UntypedQueries.listQueryForCleanup = (contextAri, options) => {
    var _a, _b, _c;
    return ({
        query: `
      query forge_app_getApplicationStorageEntitiesForCleanup($contextAri: ID!, $where: [AppStoredEntityFilter!], $cursor: String, $limit: Int) {
        appStoredEntitiesForCleanup(contextAri: $contextAri, where: $where, after: $cursor, first: $limit) {
          edges {
            node {
              value
              key
            }
  
            cursor
          }
        }
      }
    `,
        variables: {
            contextAri,
            where: (_a = options.where) !== null && _a !== void 0 ? _a : null,
            cursor: (_b = options.cursor) !== null && _b !== void 0 ? _b : null,
            limit: (_c = options.limit) !== null && _c !== void 0 ? _c : null
        }
    });
};
class CustomEntityQueries {
}
exports.CustomEntityQueries = CustomEntityQueries;
CustomEntityQueries.get = (contextAri, entityName, key) => ({
    query: `
    query forge_app_getApplicationStorageCustomEntity ($contextAri: ID!, $key: ID!, $entityName: String!) {
      appStoredCustomEntity(contextAri: $contextAri, key: $key, entityName: $entityName) {
          value
          entityName
          key
      }
  }
    `,
    variables: {
        contextAri,
        entityName,
        key
    }
});
CustomEntityQueries.set = (contextAri, entityName, key, value) => ({
    query: `
      mutation forge_app_setApplicationStorageCustomEntity($input: SetAppStoredCustomEntityMutationInput!) {
        appStorageCustomEntity{
          setAppStoredCustomEntity(input: $input) {
            success
  
            errors {
              message
              extensions {
                errorType
                statusCode
              }
            }
          }
        }
      }
    `,
    variables: {
        input: {
            contextAri,
            entityName,
            key,
            value
        }
    }
});
CustomEntityQueries.delete = (contextAri, entityName, key) => ({
    query: `
      mutation forge_app_deleteApplicationStorageCustomEntity($input: DeleteAppStoredCustomEntityMutationInput!) {
        appStorageCustomEntity {
          deleteAppStoredCustomEntity(input: $input) {
            success
  
            errors {
              message
              extensions {
                errorType
                statusCode
              }
            }
          }
        }
      }
    `,
    variables: {
        input: {
            contextAri,
            entityName,
            key
        }
    }
});
CustomEntityQueries.listQuery = (contextAri, options) => {
    return {
        query: `
      query AppStorageCustomEntityQueries ($contextAri: ID!, $entityName: String!, $indexName: String!, $range: AppStoredCustomEntityRange, $filters: AppStoredCustomEntityFilters, $sort:SortOrder, $limit: Int, $cursor: String, $partition: [AppStoredCustomEntityFieldValue!]) {
        appStoredCustomEntities(contextAri: $contextAri, entityName: $entityName, indexName: $indexName, range: $range, filters: $filters, sort:$sort, limit: $limit, cursor: $cursor, partition: $partition) {
            edges {
                node {
                    key
                    value
                }
                cursor
            }
            pageInfo {
                hasNextPage
                hasPreviousPage
            }
            totalCount
            cursor
        }
  } 
      `,
        variables: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ contextAri, entityName: options.entityName, indexName: options.indexName, range: options.range }, (options.filters && options.filters.length
            ? {
                filters: {
                    [options.filterOperator || 'and']: options.filters
                }
            }
            : {})), (options.partition ? { partition: options.partition } : {})), (options.sort ? { sort: options.sort } : {})), (options.cursor ? { cursor: options.cursor } : {})), (options.limit ? { limit: options.limit } : {}))
    };
};
