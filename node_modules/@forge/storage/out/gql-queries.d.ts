import { CustomEntityListOptions, ListOptions } from './query-interfaces';
export declare class UntypedQueries {
    static get: (contextAri: string, key: string, encrypted: boolean) => {
        query: string;
        variables: {
            contextAri: string;
            key: string;
            encrypted: boolean;
        };
    };
    static set: (contextAri: string, key: string, value: any, encrypted: boolean) => {
        query: string;
        variables: {
            input: {
                contextAri: string;
                key: string;
                value: any;
                encrypted: boolean;
            };
        };
    };
    static delete: (contextAri: string, key: string, encrypted: boolean) => {
        query: string;
        variables: {
            input: {
                contextAri: string;
                key: string;
                encrypted: boolean;
            };
        };
    };
    static listQuery: (contextAri: string, options: ListOptions) => {
        query: string;
        variables: {
            contextAri: string;
            where: import("./query-interfaces").WhereClause[] | null;
            cursor: string | null;
            limit: number | null;
        };
    };
    static listQueryForCleanup: (contextAri: string, options: ListOptions) => {
        query: string;
        variables: {
            contextAri: string;
            where: import("./query-interfaces").WhereClause[] | null;
            cursor: string | null;
            limit: number | null;
        };
    };
}
export declare class CustomEntityQueries {
    static get: (contextAri: string, entityName: string, key: string) => {
        query: string;
        variables: {
            contextAri: string;
            entityName: string;
            key: string;
        };
    };
    static set: (contextAri: string, entityName: string, key: string, value: any) => {
        query: string;
        variables: {
            input: {
                contextAri: string;
                entityName: string;
                key: string;
                value: any;
            };
        };
    };
    static delete: (contextAri: string, entityName: string, key: string) => {
        query: string;
        variables: {
            input: {
                contextAri: string;
                entityName: string;
                key: string;
            };
        };
    };
    static listQuery: (contextAri: string, options: CustomEntityListOptions) => {
        query: string;
        variables: {
            limit?: number | undefined;
            cursor?: string | undefined;
            sort?: import("./query-interfaces").SortOrder | undefined;
            partition?: import("./query-interfaces").CustomEntityPartitionValue[] | undefined;
            filters?: {
                [x: string]: import("./query-interfaces").FilterClause[];
            } | undefined;
            contextAri: string;
            entityName: string | undefined;
            indexName: string | undefined;
            range: import("./query-interfaces").RangeClause | undefined;
        };
    };
}
//# sourceMappingURL=gql-queries.d.ts.map