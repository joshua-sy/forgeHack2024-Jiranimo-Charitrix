"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapInMetrics = exports.getAppContext = exports.__getRuntime = void 0;
const errors_1 = require("./errors");
const node_fetch_1 = require("node-fetch");
const ari_1 = require("./ari");
function __getRuntime() {
    const runtime = global.__forge_runtime__;
    if (!runtime) {
        throw new Error('Forge runtime not found.');
    }
    return runtime;
}
exports.__getRuntime = __getRuntime;
function getAppContext() {
    const { appId, appVersion, environmentId, environmentType, invocationId, installationId, moduleKey } = __getRuntime().appContext;
    return {
        appAri: (0, ari_1.getAppAri)(appId),
        appVersion,
        environmentAri: (0, ari_1.getEnvironmentAri)(appId, environmentId),
        environmentType,
        installationAri: (0, ari_1.getInstallationAri)(installationId),
        invocationId,
        moduleKey
    };
}
exports.getAppContext = getAppContext;
function wrapInMetrics(name, fn, { tags } = {}) {
    return async (...args) => {
        const { metrics } = __getRuntime();
        metrics.counter(name, tags).incr();
        const timer = metrics.timing(name, tags).measure();
        let success = true;
        try {
            return await fn(...args);
        }
        catch (e) {
            if (e instanceof errors_1.ProxyRequestError || e instanceof node_fetch_1.FetchError) {
                success = false;
            }
            throw e;
        }
        finally {
            timer.stop({ success: success.toString() });
        }
    };
}
exports.wrapInMetrics = wrapInMetrics;
